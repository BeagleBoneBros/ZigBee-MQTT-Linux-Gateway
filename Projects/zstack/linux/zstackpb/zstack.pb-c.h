/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: zstack.proto */

#ifndef PROTOBUF_C_zstack_2eproto__INCLUDED
#define PROTOBUF_C_zstack_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS


typedef struct _AFAddr AFAddr;
typedef struct _StartupOptions StartupOptions;
typedef struct _SimpleDescriptor SimpleDescriptor;
typedef struct _TransOptions TransOptions;
typedef struct _CapabilityInfo CapabilityInfo;
typedef struct _ServerCapabilities ServerCapabilities;
typedef struct _BindRec BindRec;
typedef struct _LeaveOptions LeaveOptions;
typedef struct _NodeDescriptor NodeDescriptor;
typedef struct _PowerSource PowerSource;
typedef struct _PowerDescriptor PowerDescriptor;
typedef struct _NwkDiscItem NwkDiscItem;
typedef struct _NeighborLqiItem NeighborLqiItem;
typedef struct _RtgItem RtgItem;
typedef struct _BindItem BindItem;
typedef struct _DeviceTypes DeviceTypes;
typedef struct _SysResetReq SysResetReq;
typedef struct _SysVersionReq SysVersionReq;
typedef struct _SysConfigReadReq SysConfigReadReq;
typedef struct _SysConfigWriteReq SysConfigWriteReq;
typedef struct _SysSetTxPowerReq SysSetTxPowerReq;
typedef struct _SysNwkInfoReadReq SysNwkInfoReadReq;
typedef struct _SysResetInd SysResetInd;
typedef struct _SysVersionRsp SysVersionRsp;
typedef struct _SysConfigReadRsp SysConfigReadRsp;
typedef struct _SysSetTxPowerRsp SysSetTxPowerRsp;
typedef struct _SysNwkInfoReadRsp SysNwkInfoReadRsp;
typedef struct _DevStartReq DevStartReq;
typedef struct _DevNwkDiscReq DevNwkDiscReq;
typedef struct _DevJoinReq DevJoinReq;
typedef struct _DevRejoinReq DevRejoinReq;
typedef struct _DevZDOCBReq DevZDOCBReq;
typedef struct _DevNwkRouteReq DevNwkRouteReq;
typedef struct _DevNwkCheckRouteReq DevNwkCheckRouteReq;
typedef struct _DevJammerInd DevJammerInd;
typedef struct _DevPermitJoinInd DevPermitJoinInd;
typedef struct _ApsRemoveGroup ApsRemoveGroup;
typedef struct _ApsRemoveAllGroups ApsRemoveAllGroups;
typedef struct _ApsFindAllGroupsReq ApsFindAllGroupsReq;
typedef struct _ApsFindAllGroupsRsp ApsFindAllGroupsRsp;
typedef struct _ApsFindGroupReq ApsFindGroupReq;
typedef struct _ApsFindGroupRsp ApsFindGroupRsp;
typedef struct _ApsAddGroup ApsAddGroup;
typedef struct _ApsCountAllGroups ApsCountAllGroups;
typedef struct _AfRegisterReq AfRegisterReq;
typedef struct _AfUnRegisterReq AfUnRegisterReq;
typedef struct _AfDataReq AfDataReq;
typedef struct _AfInterPanCtlReq AfInterPanCtlReq;
typedef struct _AfConfigGetReq AfConfigGetReq;
typedef struct _AfConfigSetReq AfConfigSetReq;
typedef struct _AfConfigGetRsp AfConfigGetRsp;
typedef struct _AfDataConfirmInd AfDataConfirmInd;
typedef struct _AfIncomingMsgInd AfIncomingMsgInd;
typedef struct _AfReflectErrorInd AfReflectErrorInd;
typedef struct _ZdoNwkAddrReq ZdoNwkAddrReq;
typedef struct _ZdoIeeeAddrReq ZdoIeeeAddrReq;
typedef struct _ZdoNodeDescReq ZdoNodeDescReq;
typedef struct _ZdoPowerDescReq ZdoPowerDescReq;
typedef struct _ZdoSimpleDescReq ZdoSimpleDescReq;
typedef struct _ZdoActiveEndpointReq ZdoActiveEndpointReq;
typedef struct _ZdoMatchDescReq ZdoMatchDescReq;
typedef struct _ZdoComplexDescReq ZdoComplexDescReq;
typedef struct _ZdoUserDescReq ZdoUserDescReq;
typedef struct _ZdoDeviceAnnounceReq ZdoDeviceAnnounceReq;
typedef struct _ZdoUserDescSetReq ZdoUserDescSetReq;
typedef struct _ZdoServerDiscReq ZdoServerDiscReq;
typedef struct _ZdoEndDeviceBindReq ZdoEndDeviceBindReq;
typedef struct _ZdoBindReq ZdoBindReq;
typedef struct _ZdoUnbindReq ZdoUnbindReq;
typedef struct _ZdoMgmtNwkDiscReq ZdoMgmtNwkDiscReq;
typedef struct _ZdoMgmtLqiReq ZdoMgmtLqiReq;
typedef struct _ZdoMgmtRtgReq ZdoMgmtRtgReq;
typedef struct _ZdoMgmtBindReq ZdoMgmtBindReq;
typedef struct _ZdoMgmtLeaveReq ZdoMgmtLeaveReq;
typedef struct _ZdoMgmtDirectJoinReq ZdoMgmtDirectJoinReq;
typedef struct _ZdoMgmtPermitJoinReq ZdoMgmtPermitJoinReq;
typedef struct _ZdoMgmtNwkUpdateReq ZdoMgmtNwkUpdateReq;
typedef struct _ZdoNwkAddrRspInd ZdoNwkAddrRspInd;
typedef struct _ZdoIeeeAddrRspInd ZdoIeeeAddrRspInd;
typedef struct _ZdoNodeDescRspInd ZdoNodeDescRspInd;
typedef struct _ZdoPowerDescRspInd ZdoPowerDescRspInd;
typedef struct _ZdoSimpleDescRspInd ZdoSimpleDescRspInd;
typedef struct _ZdoActiveEndpointsRspInd ZdoActiveEndpointsRspInd;
typedef struct _ZdoMatchDescRspInd ZdoMatchDescRspInd;
typedef struct _ZdoUserDescRspInd ZdoUserDescRspInd;
typedef struct _ZdoServerDiscoveryRspInd ZdoServerDiscoveryRspInd;
typedef struct _ZdoEndDeviceTimeoutRspInd ZdoEndDeviceTimeoutRspInd;
typedef struct _ZdoBindRspInd ZdoBindRspInd;
typedef struct _ZdoEndDeviceBindRspInd ZdoEndDeviceBindRspInd;
typedef struct _ZdoUnbindRspInd ZdoUnbindRspInd;
typedef struct _ZdoDeviceAnnounceInd ZdoDeviceAnnounceInd;
typedef struct _ZdoDeviceAnnounceShadowInd ZdoDeviceAnnounceShadowInd;
typedef struct _ZdoMgmtNwkDiscRspInd ZdoMgmtNwkDiscRspInd;
typedef struct _ZdoMgmtLqiRspInd ZdoMgmtLqiRspInd;
typedef struct _ZdoMgmtRtgRspInd ZdoMgmtRtgRspInd;
typedef struct _ZdoMgmtBindRspInd ZdoMgmtBindRspInd;
typedef struct _ZdoMgmtLeaveRspInd ZdoMgmtLeaveRspInd;
typedef struct _ZdoMgmtDirectJoinRspInd ZdoMgmtDirectJoinRspInd;
typedef struct _ZdoMgmtPermitJoinRspInd ZdoMgmtPermitJoinRspInd;
typedef struct _ZdoMgmtNwkUpdateNotifyInd ZdoMgmtNwkUpdateNotifyInd;
typedef struct _ZdoTcDeviceInd ZdoTcDeviceInd;
typedef struct _ZdoSrcRtgInd ZdoSrcRtgInd;
typedef struct _ZdoConcentratorInd ZdoConcentratorInd;
typedef struct _ZdoNwkDiscCnf ZdoNwkDiscCnf;
typedef struct _ZdoBeaconNotifyInd ZdoBeaconNotifyInd;
typedef struct _ZdoJoinCnf ZdoJoinCnf;
typedef struct _ZdoLeaveCnf ZdoLeaveCnf;
typedef struct _ZdoLeaveInd ZdoLeaveInd;
typedef struct _AppCnfCommissioningNotification AppCnfCommissioningNotification;
typedef struct _DevStateChangeInd DevStateChangeInd;
typedef struct _SecNwkKeyGetReq SecNwkKeyGetReq;
typedef struct _SecNwkKeySetReq SecNwkKeySetReq;
typedef struct _SecNwkKeyUpdateReq SecNwkKeyUpdateReq;
typedef struct _SecNwkKeySwitchReq SecNwkKeySwitchReq;
typedef struct _SecApsLinkKeyGetReq SecApsLinkKeyGetReq;
typedef struct _SecApsLinkKeySetReq SecApsLinkKeySetReq;
typedef struct _SecApsLinkKeyRemoveReq SecApsLinkKeyRemoveReq;
typedef struct _SecApsRemoveReq SecApsRemoveReq;
typedef struct _SecNwkKeyGetRsp SecNwkKeyGetRsp;
typedef struct _SecApsLinkKeyGetRsp SecApsLinkKeyGetRsp;
typedef struct _GpSecReqIncomingMsgInd GpSecReqIncomingMsgInd;
typedef struct _GpSecRspMsg GpSecRspMsg;
typedef struct _AppCnfAddInstallCodeReq AppCnfAddInstallCodeReq;
typedef struct _ZstackDefaultRsp ZstackDefaultRsp;
typedef struct _SendGetDevNwkInfoReq SendGetDevNwkInfoReq;
typedef struct _GpDataIndIncomingMsgInd GpDataIndIncomingMsgInd;
typedef struct _UtilSetDevNwkInfoReq UtilSetDevNwkInfoReq;
typedef struct _AppCnfStartCommissioningReq AppCnfStartCommissioningReq;
typedef struct _ZclActionReq ZclActionReq;
typedef struct _ZclActionRsp ZclActionRsp;


/* --- enums --- */

/*
 * ZStack Proto Version, this file's version
 */
typedef enum _ZStackAPIVersion {
  ZSTACK_APIVERSION__ZSTACK_API_VERSION = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZSTACK_APIVERSION)
} ZStackAPIVersion;
/*
 * MT System ID for ZStack Protobuf sub-system ID
 */
typedef enum _ZStackSysIDs {
  ZSTACK_SYS_IDS__RPC_SYS_PROTOBUF = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZSTACK_SYS_IDS)
} ZStackSysIDs;
/*
 * Command IDs - each of these are associated with Request, Responses, Indications, and Confirm messages
 */
typedef enum _ZStackCmdIDs {
  ZSTACK_CMD_IDS__SYS_RESET_REQ = 0,
  ZSTACK_CMD_IDS__SYS_VERSION_REQ = 2,
  ZSTACK_CMD_IDS__SYS_CONFIG_READ_REQ = 3,
  ZSTACK_CMD_IDS__SYS_CONFIG_WRITE_REQ = 4,
  ZSTACK_CMD_IDS__SYS_SET_TX_POWER_REQ = 7,
  ZSTACK_CMD_IDS__SYS_NWK_INFO_READ_REQ = 8,
  ZSTACK_CMD_IDS__SYS_NWK_INFO_WRITE_REQ = 9,
  ZSTACK_CMD_IDS__SYS_VERSION_RSP = 10,
  ZSTACK_CMD_IDS__SYS_CONFIG_READ_RSP = 11,
  ZSTACK_CMD_IDS__SYS_SET_TX_POWER_RSP = 13,
  ZSTACK_CMD_IDS__SYS_NWK_INFO_READ_RSP = 14,
  ZSTACK_CMD_IDS__SYS_NWK_INFO_WRITE_RSP = 15,
  ZSTACK_CMD_IDS__DEV_START_REQ = 16,
  ZSTACK_CMD_IDS__DEV_NWK_DISCOVERY_REQ = 17,
  ZSTACK_CMD_IDS__DEV_JOIN_REQ = 18,
  ZSTACK_CMD_IDS__DEV_REJOIN_REQ = 19,
  ZSTACK_CMD_IDS__DEV_ZDO_CBS_REQ = 20,
  ZSTACK_CMD_IDS__DEV_NWK_ROUTE_REQ = 21,
  ZSTACK_CMD_IDS__DEV_NWK_CHECK_ROUTE_REQ = 22,
  ZSTACK_CMD_IDS__DEV_JAMMER_IND = 23,
  ZSTACK_CMD_IDS__APS_REMOVE_GROUP = 24,
  ZSTACK_CMD_IDS__APS_REMOVE_ALL_GROUPS = 25,
  ZSTACK_CMD_IDS__APS_FIND_ALL_GROUPS_REQ = 26,
  ZSTACK_CMD_IDS__APS_FIND_ALL_GROUPS_RSP = 27,
  ZSTACK_CMD_IDS__APS_FIND_GROUP_REQ = 28,
  ZSTACK_CMD_IDS__APS_FIND_GROUP_RSP = 29,
  ZSTACK_CMD_IDS__APS_ADD_GROUP = 30,
  ZSTACK_CMD_IDS__APS_COUNT_ALL_GROUPS = 31,
  ZSTACK_CMD_IDS__AF_REGISTER_REQ = 32,
  ZSTACK_CMD_IDS__AF_UNREGISTER_REQ = 33,
  ZSTACK_CMD_IDS__AF_DATA_REQ = 34,
  ZSTACK_CMD_IDS__AF_INTERPAN_CTL_REQ = 35,
  ZSTACK_CMD_IDS__AF_CONFIG_GET_REQ = 36,
  ZSTACK_CMD_IDS__AF_CONFIG_SET_REQ = 37,
  ZSTACK_CMD_IDS__ZDO_NWK_ADDR_REQ = 48,
  ZSTACK_CMD_IDS__ZDO_IEEE_ADDR_REQ = 49,
  ZSTACK_CMD_IDS__ZDO_NODE_DESC_REQ = 50,
  ZSTACK_CMD_IDS__ZDO_POWER_DESC_REQ = 51,
  ZSTACK_CMD_IDS__ZDO_SIMPLE_DESC_REQ = 52,
  ZSTACK_CMD_IDS__ZDO_ACTIVE_ENDPOINT_REQ = 53,
  ZSTACK_CMD_IDS__ZDO_MATCH_DESC_REQ = 54,
  ZSTACK_CMD_IDS__ZDO_COMPLEX_DESC_REQ = 55,
  ZSTACK_CMD_IDS__ZDO_SERVER_DISC_REQ = 57,
  ZSTACK_CMD_IDS__ZDO_END_DEVICE_BIND_REQ = 58,
  ZSTACK_CMD_IDS__ZDO_BIND_REQ = 59,
  ZSTACK_CMD_IDS__ZDO_UNBIND_REQ = 60,
  ZSTACK_CMD_IDS__ZDO_MGMT_NWK_DISC_REQ = 61,
  ZSTACK_CMD_IDS__ZDO_MGMT_LQI_REQ = 62,
  ZSTACK_CMD_IDS__ZDO_MGMT_RTG_REQ = 63,
  ZSTACK_CMD_IDS__ZDO_MGMT_BIND_REQ = 64,
  ZSTACK_CMD_IDS__ZDO_MGMT_LEAVE_REQ = 65,
  ZSTACK_CMD_IDS__ZDO_MGMT_DIRECT_JOIN_REQ = 66,
  ZSTACK_CMD_IDS__ZDO_MGMT_PERMIT_JOIN_REQ = 67,
  ZSTACK_CMD_IDS__ZDO_MGMT_NWK_UPDATE_REQ = 68,
  ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE_REQ = 69,
  ZSTACK_CMD_IDS__ZDO_USER_DESCR_SET_REQ = 70,
  ZSTACK_CMD_IDS__ZDO_USER_DESC_REQ = 71,
  ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE = 72,
  ZSTACK_CMD_IDS__ZDO_NWK_ADDR_RSP = 96,
  ZSTACK_CMD_IDS__ZDO_IEEE_ADDR_RSP = 97,
  ZSTACK_CMD_IDS__ZDO_NODE_DESC_RSP = 98,
  ZSTACK_CMD_IDS__ZDO_POWER_DESC_RSP = 99,
  ZSTACK_CMD_IDS__ZDO_SIMPLE_DESC_RSP = 100,
  ZSTACK_CMD_IDS__ZDO_ACTIVE_EP_RSP = 101,
  ZSTACK_CMD_IDS__ZDO_MATCH_DESC_RSP = 102,
  ZSTACK_CMD_IDS__ZDO_COMPLEX_DESC_RSP = 103,
  ZSTACK_CMD_IDS__ZDO_USER_DESC_RSP = 104,
  ZSTACK_CMD_IDS__ZDO_USER_DESC_SET_RSP = 105,
  ZSTACK_CMD_IDS__ZDO_SERVER_DISC_RSP = 106,
  ZSTACK_CMD_IDS__ZDO_END_DEVICE_BIND_RSP = 107,
  ZSTACK_CMD_IDS__ZDO_BIND_RSP = 108,
  ZSTACK_CMD_IDS__ZDO_UNBIND_RSP = 109,
  ZSTACK_CMD_IDS__ZDO_MGMT_NWK_DISC_RSP = 110,
  ZSTACK_CMD_IDS__ZDO_MGMT_LQI_RSP = 111,
  ZSTACK_CMD_IDS__ZDO_MGMT_RTG_RSP = 112,
  ZSTACK_CMD_IDS__ZDO_MGMT_BIND_RSP = 113,
  ZSTACK_CMD_IDS__ZDO_MGMT_LEAVE_RSP = 114,
  ZSTACK_CMD_IDS__ZDO_MGMT_DIRECT_JOIN_RSP = 115,
  ZSTACK_CMD_IDS__ZDO_MGMT_PERMIT_JOIN_RSP = 116,
  ZSTACK_CMD_IDS__ZDO_MGMT_NWK_UPDATE_NOTIFY = 117,
  ZSTACK_CMD_IDS__ZDO_END_DEVICE_TIMEOUT_RSP = 118,
  ZSTACK_CMD_IDS__ZDO_SRC_RTG_IND = 128,
  ZSTACK_CMD_IDS__ZDO_CONCENTRATOR_IND = 129,
  ZSTACK_CMD_IDS__ZDO_NWK_DISC_CNF = 130,
  ZSTACK_CMD_IDS__ZDO_BEACON_NOTIFY_IND = 131,
  ZSTACK_CMD_IDS__ZDO_JOIN_CNF = 132,
  ZSTACK_CMD_IDS__ZDO_LEAVE_CNF = 133,
  ZSTACK_CMD_IDS__ZDO_LEAVE_IND = 134,
  ZSTACK_CMD_IDS__AF_CONFIG_GET_RSP = 135,
  ZSTACK_CMD_IDS__SYS_RESET_IND = 144,
  ZSTACK_CMD_IDS__AF_DATA_CONFIRM_IND = 145,
  ZSTACK_CMD_IDS__AF_INCOMING_MSG_IND = 146,
  ZSTACK_CMD_IDS__AF_REFLECT_ERROR_IND = 147,
  ZSTACK_CMD_IDS__DEV_STATE_CHANGE_IND = 148,
  ZSTACK_CMD_IDS__ZDO_TC_DEVICE_IND = 149,
  ZSTACK_CMD_IDS__DEV_PERMIT_JOIN_IND = 150,
  ZSTACK_CMD_IDS__SEC_NWK_KEY_GET_REQ = 160,
  ZSTACK_CMD_IDS__SEC_NWK_KEY_SET_REQ = 161,
  ZSTACK_CMD_IDS__SEC_NWK_KEY_UPDATE_REQ = 162,
  ZSTACK_CMD_IDS__SEC_NWK_KEY_SWITCH_REQ = 163,
  ZSTACK_CMD_IDS__SEC_APS_LINKKEY_GET_REQ = 164,
  ZSTACK_CMD_IDS__SEC_APS_LINKKEY_SET_REQ = 165,
  ZSTACK_CMD_IDS__SEC_APS_LINKKEY_REMOVE_REQ = 166,
  ZSTACK_CMD_IDS__SEC_APS_REMOVE_REQ = 167,
  ZSTACK_CMD_IDS__SEC_NWK_KEY_GET_RSP = 176,
  ZSTACK_CMD_IDS__SEC_APS_LINKKEY_GET_RSP = 177,
  ZSTACK_CMD_IDS__ZSTACK_DEFAULT_RSP = 250,
  ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE_SHADOW = 226,
  ZSTACK_CMD_IDS__APP_CNF_COMMISSIONING_NOTIFICATION = 227,
  ZSTACK_CMD_IDS__GP_SEC_REQ_INCOMING_MSG = 228,
  ZSTACK_CMD_IDS__GP_SEC_RSP_MSG = 229,
  ZSTACK_CMD_IDS__APP_CNF_ADD_INSTALL_CODE_REQ = 230,
  ZSTACK_CMD_IDS__SEND_GET_DEV_NWK_INFO_REQ = 241,
  ZSTACK_CMD_IDS__GP_DATA_IND_INCOMING_MSG = 242,
  ZSTACK_CMD_IDS__ZCL_ACTION_REQ = 243,
  ZSTACK_CMD_IDS__APP_CNF_START_COMMISSIONING_REQ = 244,
  ZSTACK_CMD_IDS__UTIL_SET_DEV_NWK_INFO_REQ = 245,
  ZSTACK_CMD_IDS__UTIL_GET_DEV_NWK_INFO_REQ = 246,
  ZSTACK_CMD_IDS__GP_ADDRESS_CONFLICT = 247,
  ZSTACK_CMD_IDS__ZCL_ACTION_RSP = 248
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZSTACK_CMD_IDS)
} ZStackCmdIDs;
/*
 * General collection of status values
 */
typedef enum _ZStatusValues {
  /*
   * Operation successful
   */
  ZSTATUS_VALUES__ZSuccess = 0,
  ZSTATUS_VALUES__ZFailure = 1,
  ZSTATUS_VALUES__ZInvalidParameter = 2,
  ZSTATUS_VALUES__ZDecodeError = 3,
  ZSTATUS_VALUES__ZMemError = 16,
  ZSTATUS_VALUES__ZBufferFull = 17,
  ZSTATUS_VALUES__ZUnsupportedMode = 18,
  ZSTATUS_VALUES__ZMacMemError = 19,
  ZSTATUS_VALUES__ZSapiInProgress = 32,
  ZSTATUS_VALUES__ZSapiTimeout = 33,
  ZSTATUS_VALUES__ZSapiInit = 34,
  ZSTATUS_VALUES__ZNotAuthorized = 126,
  ZSTATUS_VALUES__ZMalformedCmd = 128,
  ZSTATUS_VALUES__ZUnsupClusterCmd = 129,
  ZSTATUS_VALUES__ZOtaAbort = 149,
  ZSTATUS_VALUES__ZOtaImageInvalid = 150,
  ZSTATUS_VALUES__ZOtaWaitForData = 151,
  ZSTATUS_VALUES__ZOtaNoImageAvailable = 152,
  ZSTATUS_VALUES__ZOtaRequireMoreImage = 153,
  ZSTATUS_VALUES__ZApsFail = 177,
  ZSTATUS_VALUES__ZApsTableFull = 178,
  ZSTATUS_VALUES__ZApsIllegalRequest = 179,
  ZSTATUS_VALUES__ZApsInvalidBinding = 180,
  ZSTATUS_VALUES__ZApsUnsupportedAttrib = 181,
  ZSTATUS_VALUES__ZApsNotSupported = 182,
  ZSTATUS_VALUES__ZApsNoAck = 183,
  ZSTATUS_VALUES__ZApsDuplicateEntry = 184,
  ZSTATUS_VALUES__ZApsNoBoundDevice = 185,
  ZSTATUS_VALUES__ZApsNotAllowed = 186,
  ZSTATUS_VALUES__ZApsNotAuthenticated = 187,
  ZSTATUS_VALUES__ZSecNoKey = 161,
  ZSTATUS_VALUES__ZSecOldFrmCount = 162,
  ZSTATUS_VALUES__ZSecMaxFrmCount = 163,
  ZSTATUS_VALUES__ZSecCcmFail = 164,
  ZSTATUS_VALUES__ZNwkInvalidParam = 193,
  ZSTATUS_VALUES__ZNwkInvalidRequest = 194,
  ZSTATUS_VALUES__ZNwkNotPermitted = 195,
  ZSTATUS_VALUES__ZNwkStartupFailure = 196,
  ZSTATUS_VALUES__ZNwkAlreadyPresent = 197,
  ZSTATUS_VALUES__ZNwkSyncFailure = 198,
  ZSTATUS_VALUES__ZNwkTableFull = 199,
  ZSTATUS_VALUES__ZNwkUnknownDevice = 200,
  ZSTATUS_VALUES__ZNwkUnsupportedAttribute = 201,
  ZSTATUS_VALUES__ZNwkNoNetworks = 202,
  ZSTATUS_VALUES__ZNwkLeaveUnconfirmed = 203,
  ZSTATUS_VALUES__ZNwkNoAck = 204,
  ZSTATUS_VALUES__ZNwkNoRoute = 205,
  ZSTATUS_VALUES__ZAfDuplicateEndpoint = 208,
  ZSTATUS_VALUES__ZAfEndpointMax = 209
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZSTATUS_VALUES)
} ZStatusValues;
typedef enum _CommNotification {
  COMM_NOTIFICATION__STATUS_SUCCESS = 0,
  COMM_NOTIFICATION__IN_PROGRESS = 1,
  COMM_NOTIFICATION__NO_NETWORK = 2,
  COMM_NOTIFICATION__TL_TARGET_FAILURE = 3,
  COMM_NOTIFICATION__TL_NOT_AA_CAPABLE = 4,
  COMM_NOTIFICATION__TL_NOT_SCAN_RESPONSE = 5,
  COMM_NOTIFICATION__TL_NOT_PERMITED = 6,
  COMM_NOTIFICATION__TCLK_EX_FAILURE = 7,
  COMM_NOTIFICATION__FORMATION_FAILURE = 8,
  COMM_NOTIFICATION__FB_TARGET_IN_PROGRESS = 9,
  COMM_NOTIFICATION__FB_INITIATOR_IN_PROGRESS = 10,
  COMM_NOTIFICATION__FB_NO_IDENTIFY_QUERY_RESPONSE = 11,
  COMM_NOTIFICATION__FB_BINDING_TABLE_FULL = 12,
  COMM_NOTIFICATION__NETWORK_RESTORED = 13,
  COMM_NOTIFICATION__FAILURE = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMM_NOTIFICATION)
} CommNotification;
/*
 * ZStack Server Type
 */
typedef enum _ZStackServerType {
  /*
   * ZStack Server for ZNP, Coordinator
   */
  ZSTACK_SERVER_TYPE__ZSTACKZNP_COORDINATOR = 0,
  /*
   * ZStack Server for ZNP, Router
   */
  ZSTACK_SERVER_TYPE__ZSTACKZNP_ROUTER = 1,
  /*
   * ZStack Server for ZNP, End Device
   */
  ZSTACK_SERVER_TYPE__ZSTACKZNP_ENDDEVICE = 2,
  /*
   * ZStack Server for ZNP, All Build
   */
  ZSTACK_SERVER_TYPE__ZSTACKZNP_ALLBUILD = 3,
  /*
   * ZStack Server (Full), Coordinator
   */
  ZSTACK_SERVER_TYPE__ZSTACK_COORDINATOR = 4,
  /*
   * ZStack Server (Full), Router
   */
  ZSTACK_SERVER_TYPE__ZSTACK_ROUTER = 5,
  /*
   * ZStack Server (Full), End Device
   */
  ZSTACK_SERVER_TYPE__ZSTACK_ENDDEVICE = 6,
  /*
   * ZStack Server (Full), All Build
   */
  ZSTACK_SERVER_TYPE__ZSTACK_ALLBUILD = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZSTACK_SERVER_TYPE)
} ZStackServerType;
/*
 * Address types
 */
typedef enum _AFAddrMode {
  /*
   * Address not present
   */
  AFADDR_MODE__NONE = 0,
  /*
   * Group Address (uint16)
   */
  AFADDR_MODE__GROUP = 1,
  /*
   * Short Address (uint16)
   */
  AFADDR_MODE__SHORT = 2,
  /*
   * Extended Address (8 bytes/64 bits)
   */
  AFADDR_MODE__EXT = 3,
  /*
   * Broadcast Address (uint16)
   */
  AFADDR_MODE__BROADCAST = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AFADDR_MODE)
} AFAddrMode;
/*
 * Reset types
 */
typedef enum _ResetTypes {
  /*
   * Target Device Reset
   */
  RESET_TYPES__DEVICE = 0,
  /*
   * Serial Bootloader Reset
   */
  RESET_TYPES__SERIAL_BOOTLOADER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESET_TYPES)
} ResetTypes;
/*
 * Reset reasons
 */
typedef enum _ResetReasons {
  RESET_REASONS__POWERUP = 0,
  RESET_REASONS__EXTERNAL = 1,
  RESET_REASONS__WATCHDOG = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESET_REASONS)
} ResetReasons;
typedef enum _LogicalTypes {
  LOGICAL_TYPES__COORDINATOR = 0,
  LOGICAL_TYPES__ROUTER = 1,
  LOGICAL_TYPES__ENDDEVICE = 2,
  LOGICAL_TYPES__UNKNOWN_TYPE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOGICAL_TYPES)
} LogicalTypes;
typedef enum _NetworkLatency {
  /*
   * Use only this value
   */
  NETWORK_LATENCY__NO_LATENCY_REQS = 0,
  NETWORK_LATENCY__FAST_BEACONS = 1,
  NETWORK_LATENCY__SLOW_BEACONDS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NETWORK_LATENCY)
} NetworkLatency;
typedef enum _NwkAddrReqType {
  NWK_ADDR_REQ_TYPE__SINGLE_DEVICE = 0,
  NWK_ADDR_REQ_TYPE__EXTENDED_W_ASSOCDEVS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NWK_ADDR_REQ_TYPE)
} NwkAddrReqType;
typedef enum _PowerLevel {
  /*
   * Critical power level
   */
  POWER_LEVEL__LEVEL_CRITICAL = 0,
  /*
   * Power level at 33%
   */
  POWER_LEVEL__LEVEL_33 = 4,
  /*
   * Power level at 66%
   */
  POWER_LEVEL__LEVEL_66 = 8,
  /*
   * Power level at 100%
   */
  POWER_LEVEL__LEVEL_100 = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POWER_LEVEL)
} PowerLevel;
typedef enum _PowerModes {
  /*
   * Receiver synchronized with the receiver on when idle (nodeDesc)
   */
  POWER_MODES__POWER_SYNCHRONIZED = 0,
  /*
   * Receiver comes on periodically (powerDesc)
   */
  POWER_MODES__POWER_PERIODIC = 1,
  /*
   * Receiver comes on when stimulated, e.g. key press
   */
  POWER_MODES__POWER_STIMULATED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POWER_MODES)
} PowerModes;
typedef enum _ZdpStatus {
  /*
   * Operation completed successfully
   */
  ZDP_STATUS__SUCCESS = 0,
  /*
   * The supplied request type was invalid
   */
  ZDP_STATUS__INVALID_REQTYPE = 128,
  /*
   * Reserved
   */
  ZDP_STATUS__DEVICE_NOT_FOUND = 129,
  /*
   * Invalid endpoint value
   */
  ZDP_STATUS__INVALID_EP = 130,
  /*
   * Endpoint not described by a simple desc.
   */
  ZDP_STATUS__NOT_ACTIVE = 131,
  /*
   * Optional feature not supported
   */
  ZDP_STATUS__NOT_SUPPORTED = 132,
  /*
   * Operation has timed out
   */
  ZDP_STATUS__TIMEOUT = 133,
  /*
   * No match for end device bind
   */
  ZDP_STATUS__NO_MATCH = 134,
  /*
   * Unbind request failed, no entry
   */
  ZDP_STATUS__NO_ENTRY = 136,
  /*
   * Child descriptor not available
   */
  ZDP_STATUS__NO_DESCRIPTOR = 137,
  /*
   * Insufficient space to support operation
   */
  ZDP_STATUS__INSUFFICIENT_SPACE = 138,
  /*
   * Not in proper state to support operation
   */
  ZDP_STATUS__NOT_PERMITTED = 139,
  /*
   * No table space to support operation
   */
  ZDP_STATUS__TABLE_FULL = 140,
  /*
   * Permissions indicate request not authorized
   */
  ZDP_STATUS__NOT_AUTHORIZED = 141,
  /*
   * No binding table space to support operation
   */
  ZDP_STATUS__BINDING_TABLE_FULL = 142
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ZDP_STATUS)
} ZdpStatus;
typedef enum _DevState {
  /*
   * Initialized - not started automatically
   */
  DEV_STATE__HOLD = 0,
  /*
   * Initialized - not connected to anything
   */
  DEV_STATE__INIT = 1,
  /*
   * Discovering PAN's to join
   */
  DEV_STATE__NWK_DISC = 2,
  /*
   * Joining a PAN
   */
  DEV_STATE__NWK_JOINING = 3,
  /*
   * ReJoining a PAN, only for end devices
   */
  DEV_STATE__NWK_REJOIN = 4,
  /*
   * Joined but not yet authenticated by trust center
   */
  DEV_STATE__END_DEVICE_UNAUTH = 5,
  /*
   * Started as device after authentication
   */
  DEV_STATE__DEV_END_DEVICE = 6,
  /*
   * Device joined, authenticated and is a router
   */
  DEV_STATE__DEV_ROUTER = 7,
  /*
   * Started as Zigbee Coordinator
   */
  DEV_STATE__COORD_STARTING = 8,
  /*
   * Started as Zigbee Coordinator
   */
  DEV_STATE__DEV_ZB_COORD = 9,
  /*
   * Device has lost information about its parent..
   */
  DEV_STATE__NWK_ORPHAN = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEV_STATE)
} DevState;
typedef enum _RouteStatus {
  ROUTE_STATUS__ROUTE_ACTIVE = 0,
  ROUTE_STATUS__ROUTE_DISCOVERY_UNDERWAY = 1,
  ROUTE_STATUS__ROUTE_DISCOVERY_FAILED = 2,
  ROUTE_STATUS__ROUTE_INACTIVE = 3,
  ROUTE_STATUS__ROUTE_VALIDATION_UNDERWAY = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ROUTE_STATUS)
} RouteStatus;
typedef enum _RxOnWhenIdleType {
  RX_ON_WHEN_IDLE_TYPE__RX_ON_WHEN_IDLE_OFF = 0,
  RX_ON_WHEN_IDLE_TYPE__RX_ON_WHEN_IDLE_ON = 1,
  RX_ON_WHEN_IDLE_TYPE__RX_ON_WHEN_IDLE_UNKNOWN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RX_ON_WHEN_IDLE_TYPE)
} RxOnWhenIdleType;
typedef enum _RelationType {
  RELATION_TYPE__REL_PARENT = 0,
  RELATION_TYPE__REL_CHILD = 1,
  RELATION_TYPE__REL_SIBLING = 2,
  RELATION_TYPE__REL_UNKNOWN = 3,
  RELATION_TYPE__REL_PREVIOUS_CHILD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RELATION_TYPE)
} RelationType;
typedef enum _PermitJoinType {
  PERMIT_JOIN_TYPE__NEIGHBOR_NOT_ACCEPTING_JOIN = 0,
  PERMIT_JOIN_TYPE__NEIGHBOR_ACCEPTING_JOIN = 1,
  PERMIT_JOIN_TYPE__NEIGHBOR_UNKNOWN_JOIN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERMIT_JOIN_TYPE)
} PermitJoinType;

/* --- messages --- */

struct  _AFAddr
{
  ProtobufCMessage base;
  /*
   * Address Mode
   */
  AFAddrMode addrmode;
  /*
   * (uint16) short address
   */
  protobuf_c_boolean has_shortaddr;
  uint32_t shortaddr;
  /*
   * 64 bit address (always)
   */
  protobuf_c_boolean has_extaddr;
  uint64_t extaddr;
  /*
   * (uint8) endpoint
   */
  protobuf_c_boolean has_endpoint;
  uint32_t endpoint;
  /*
   * (uint16) PAN ID (for use with Inter-PAN)
   */
  protobuf_c_boolean has_panid;
  uint32_t panid;
};
#define AFADDR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&afaddr__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0 }


struct  _StartupOptions
{
  ProtobufCMessage base;
  /*
   * True to clear the previous network state
   */
  protobuf_c_boolean clearstate;
  /*
   * True to overwrite all the configuration parameters with defaults
   */
  protobuf_c_boolean clearconfig;
};
#define STARTUP_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&startup_options__descriptor) \
    , 0, 0 }


struct  _SimpleDescriptor
{
  ProtobufCMessage base;
  /*
   * (uint8) endpoint
   */
  uint32_t endpoint;
  /*
   * (uint16) applications profile ID
   */
  uint32_t profileid;
  /*
   * (uint16) device ID
   */
  uint32_t deviceid;
  /*
   * (uint8) device version
   */
  uint32_t devicever;
  /*
   * Array of (uint16) input clusters
   */
  size_t n_inputclusters;
  uint32_t *inputclusters;
  /*
   * Array of (uint16) output clusters
   */
  size_t n_outputclusters;
  uint32_t *outputclusters;
};
#define SIMPLE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&simple_descriptor__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _TransOptions
{
  ProtobufCMessage base;
  /*
   * set to request use of Wildcard Profile ID (OxFFFF)
   */
  protobuf_c_boolean has_wildcardprofileid;
  protobuf_c_boolean wildcardprofileid;
  /*
   * set to request APS acknowlegement
   */
  protobuf_c_boolean has_ackrequest;
  protobuf_c_boolean ackrequest;
  /*
   * set to limit the message to concentrators only
   */
  protobuf_c_boolean has_limitconcentrator;
  protobuf_c_boolean limitconcentrator;
  /*
   * set to suppress intermediate route discoveries (only initial node)
   */
  protobuf_c_boolean has_suppressroutedisc;
  protobuf_c_boolean suppressroutedisc;
  /*
   * set to enable APS security
   */
  protobuf_c_boolean has_apssecurity;
  protobuf_c_boolean apssecurity;
  /*
   * set to skip routing
   */
  protobuf_c_boolean has_skiprouting;
  protobuf_c_boolean skiprouting;
};
#define TRANS_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trans_options__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CapabilityInfo
{
  ProtobufCMessage base;
  /*
   * True if the device is a PAN Coordinator
   */
  protobuf_c_boolean pancoord;
  /*
   * True if the device is a full function device (FFD)
   */
  protobuf_c_boolean ffd;
  /*
   * True if the device is mains powered
   */
  protobuf_c_boolean mainspower;
  /*
   * True if the device's RX is on when the device is idle
   */
  protobuf_c_boolean rxonwhenidle;
  /*
   * True if the device is capable of sending and receiving secured frames
   */
  protobuf_c_boolean security;
};
#define CAPABILITY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&capability_info__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _ServerCapabilities
{
  ProtobufCMessage base;
  /*
   * Set to indicate the Primary Trust Center
   */
  protobuf_c_boolean primarytrustcenter;
  /*
   * Set to indicate the Backup Trust Center
   */
  protobuf_c_boolean backuptrustcenter;
  /*
   * Set to indicate the Primary Binding Table Cache
   */
  protobuf_c_boolean primarybindingtablecache;
  /*
   * Set to indicate the Backup Binding Table Cache
   */
  protobuf_c_boolean backupbindingtablecache;
  /*
   * Set to indicate the Primary Discovery Cache
   */
  protobuf_c_boolean primarydiscoverycache;
  /*
   * Set to indicate the Backup Discovery Cache
   */
  protobuf_c_boolean backupdiscoverycache;
  /*
   * Set to indicate the Network Manager
   */
  protobuf_c_boolean networkmanager;
};
#define SERVER_CAPABILITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_capabilities__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _BindRec
{
  ProtobufCMessage base;
  /*
   * targeted device's ieee address
   */
  uint64_t srcaddr;
  /*
   * (uint8) targeted device's endpoint
   */
  uint32_t srcendpoint;
  /*
   * (uint16) Cluster ID
   */
  uint32_t clusterid;
  /*
   * binding's destination address
   */
  AFAddr *dstaddr;
};
#define BIND_REC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bind_rec__descriptor) \
    , 0, 0, 0, NULL }


struct  _LeaveOptions
{
  ProtobufCMessage base;
  /*
   * Set to request a rejoin
   */
  protobuf_c_boolean rejoin;
  /*
   * Set to request the device's children to leave
   */
  protobuf_c_boolean removechildren;
};
#define LEAVE_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&leave_options__descriptor) \
    , 0, 0 }


struct  _NodeDescriptor
{
  ProtobufCMessage base;
  /*
   * Device type
   */
  LogicalTypes logicaltype;
  /*
   * Set if the Complex Descriptor is available
   */
  protobuf_c_boolean complexdescavail;
  /*
   * Set if the User Descriptor is available
   */
  protobuf_c_boolean userdescavail;
  /*
   * (5 bits) Node Flags assigned for APS
   */
  uint32_t apsflags;
  /*
   * (3 bits) Identifies node frequency  band capabilities
   */
  uint32_t freqband;
  /*
   * MAC Capabilities
   */
  CapabilityInfo *capinfo;
  /*
   * (uint16) Manufacturer Code allocated by Zigbee Alliance
   */
  uint32_t manufacturercode;
  /*
   * (uint8) Maximum size of NPDU
   */
  uint32_t maxbuffersize;
  /*
   * (uint16) Maximum size of transfer up to 0x7FFF, reserved and shall be set to 0
   */
  uint32_t maxintransfersize;
  /*
   * Server Capabilities
   */
  ServerCapabilities *servermask;
  /*
   * (uint16) Maximum size of Transfer up to 0x7FFF
   */
  uint32_t maxouttransfersize;
  /*
   * Descriptor capabilities
   */
  uint32_t desccap;
};
#define NODE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_descriptor__descriptor) \
    , 0, 0, 0, 0, 0, NULL, 0, 0, 0, NULL, 0, 0 }


struct  _PowerSource
{
  ProtobufCMessage base;
  /*
   * set for constant (Mains) power
   */
  protobuf_c_boolean mains;
  /*
   * set for rechargeable battery
   */
  protobuf_c_boolean recharge;
  /*
   * set for disposable battery
   */
  protobuf_c_boolean dispose;
};
#define POWER_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&power_source__descriptor) \
    , 0, 0, 0 }


struct  _PowerDescriptor
{
  ProtobufCMessage base;
  /*
   * Current power mode
   */
  PowerModes powermode;
  /*
   * Available power sources
   */
  PowerSource *availpowersource;
  /*
   * Current power source
   */
  PowerSource *currentpowersource;
  /*
   * Current power level
   */
  PowerLevel currentpowerlevel;
};
#define POWER_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&power_descriptor__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _NwkDiscItem
{
  ProtobufCMessage base;
  /*
   * 64 bit extended PAN ID
   */
  uint64_t extendedpanid;
  /*
   * (uint8) current logical channel
   */
  uint32_t logicalchan;
  /*
   * (uint8) A ZigBee profile identifier
   */
  uint32_t stackprofile;
  /*
   * (uint8) ZigBee Protocol version
   */
  uint32_t version;
  /*
   * (uint8) beacon Order
   */
  uint32_t beaconorder;
  /*
   * (uint8) superframe Order
   */
  uint32_t superframeorder;
  /*
   * True if Permit Join set
   */
  protobuf_c_boolean permitjoin;
};
#define NWK_DISC_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nwk_disc_item__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _NeighborLqiItem
{
  ProtobufCMessage base;
  /*
   * 64 bit extended PAN ID
   */
  uint64_t extendedpanid;
  /*
   * 64 bit extended address
   */
  uint64_t extendedaddr;
  /*
   * (uint16) device's short address
   */
  uint32_t nwkaddr;
  /*
   * Type of the neighbor device
   */
  LogicalTypes devicetype;
  /*
   * Receiver On When Idle status
   */
  RxOnWhenIdleType rxonwhenidle;
  /*
   * Neighbor's relationship 
   */
  RelationType relationship;
  /*
   * Permit Join Status
   */
  PermitJoinType permit;
  /*
   * The tree depth, 0 - device is coordinator
   */
  uint32_t depth;
  /*
   * (uint8) receive LQI
   */
  uint32_t lqi;
};
#define NEIGHBOR_LQI_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&neighbor_lqi_item__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _RtgItem
{
  ProtobufCMessage base;
  /*
   * (uint16) destination short address
   */
  uint32_t dstaddr;
  /*
   * (uint16) next hop short address
   */
  uint32_t nexthop;
  /*
   * Route status
   */
  RouteStatus status;
  /*
   * a flag indicating whether the device is a memory constrained concentrator
   */
  protobuf_c_boolean memoryconstrained;
  /*
   * a flag indicating that the destination is a concentrator
   */
  protobuf_c_boolean manytoone;
  /*
   * a flag indicating that a route record command frame should be sent before data
   */
  protobuf_c_boolean routerecordrequired;
};
#define RTG_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rtg_item__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _BindItem
{
  ProtobufCMessage base;
  /*
   * 64 bit source extended address
   */
  uint64_t srcaddr;
  /*
   * (uint8) source endpoint
   */
  uint32_t srcendpoint;
  /*
   * (uint16) cluster ID
   */
  uint32_t clustedid;
  /*
   * Destination address
   */
  AFAddr *dstaddr;
};
#define BIND_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bind_item__descriptor) \
    , 0, 0, 0, NULL }


struct  _DeviceTypes
{
  ProtobufCMessage base;
  protobuf_c_boolean coodinator;
  protobuf_c_boolean router;
  protobuf_c_boolean enddevice;
};
#define DEVICE_TYPES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_types__descriptor) \
    , 0, 0, 0 }


struct  _SysResetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * if the stack doesn't support a type of reset, the type will
   * be ignored and a reset will be performed. 
   */
  ResetTypes type;
  /*
   * Set this flag to TRUE to disregard the values stored in non-volatile and restart fresh.   
   */
  protobuf_c_boolean newnwkstate;
  /*
   * Set the shutdown flag to turn off the radio device, HW reset must be used to restore the radio device.
   */
  protobuf_c_boolean has_shutdown;
  protobuf_c_boolean shutdown;
};
#define SYS_RESET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_reset_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_RESET_REQ, 0, 0, 0,0 }


struct  _SysVersionReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
};
#define SYS_VERSION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_version_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_VERSION_REQ }


struct  _SysConfigReadReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True to return Pre Config Key Enable
   */
  protobuf_c_boolean preconfigkeyenable;
  /*
   * True to return Security Mode Enable (nwk)
   */
  protobuf_c_boolean securitymodeenable;
  /*
   * True to return default TCLK flag
   */
  protobuf_c_boolean usedefaulttclk;
  /*
   * True to return Poll Rate
   */
  protobuf_c_boolean pollrate;
  /*
   * True to return Queued Poll Rate
   */
  protobuf_c_boolean queuedpollrate;
  /*
   * True to return Response Poll Rate
   */
  protobuf_c_boolean responsepollrate;
  /*
   * True to return APS Ack Waite Duration
   */
  protobuf_c_boolean apsackwaitduration;
  /*
   * True to return Binding Time
   */
  protobuf_c_boolean bindingtime;
  /*
   * True to return PAN ID
   */
  protobuf_c_boolean panid;
  /*
   * True to return Poll Failure Retries
   */
  protobuf_c_boolean pollfailureretries;
  /*
   * True to return Indirect Message Timeout
   */
  protobuf_c_boolean indirectmsgtimeout;
  /*
   * / True to return APS Frame Retries
   */
  protobuf_c_boolean apsframeretries;
  /*
   * True to return Broadcast Retries
   */
  protobuf_c_boolean bcastretries;
  /*
   * True to return Passive Ack Timeout
   */
  protobuf_c_boolean passiveacktimeout;
  /*
   * True to return Broadcast Delivery Time
   */
  protobuf_c_boolean bcastdeliverytime;
  /*
   * True to return Route Expiry Time
   */
  protobuf_c_boolean routeexpirytime;
  /*
   * True to return User Descriptor (16 bytes max)
   */
  protobuf_c_boolean userdesc;
  /*
   * True to return PreConfig Key (16 bytes)
   */
  protobuf_c_boolean preconfigkey;
  /*
   * True to return Channel List (bit masked)
   */
  protobuf_c_boolean chanlist;
  /*
   * True to return the Multicast radius 
   */
  protobuf_c_boolean multicastradius;
  /*
   * True to return the extended PAN ID (APS USE)
   */
  protobuf_c_boolean extendedpanid;
  /*
   * True to return the IEEE extended address
   */
  protobuf_c_boolean ieeeaddr;
  /*
   * True to return the MAC's RxOnIdle parameter
   */
  protobuf_c_boolean macrxonidle;
  /*
   * True to return the sniffer feature enabled/disabled (if implemented)
   */
  protobuf_c_boolean snifferfeature;
  /*
   * True to return the concentrator flag
   */
  protobuf_c_boolean concentratorenable;
  /*
   * True to return the concentrator discovery time
   */
  protobuf_c_boolean concentratordisctime;
};
#define SYS_CONFIG_READ_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_config_read_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_CONFIG_READ_REQ, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SysConfigWriteReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Pre Config Key Enable
   */
  protobuf_c_boolean has_preconfigkeyenable;
  protobuf_c_boolean preconfigkeyenable;
  /*
   * Security Mode Enable (nwk)
   */
  protobuf_c_boolean has_securitymodeenable;
  protobuf_c_boolean securitymodeenable;
  /*
   * Enable the use of the preconfig Trust Center Link Key
   */
  protobuf_c_boolean has_usedefaulttclk;
  protobuf_c_boolean usedefaulttclk;
  /*
   * (uint16) End Device Poll Rate (not applicable for routers)
   */
  protobuf_c_boolean has_pollrate;
  uint32_t pollrate;
  /*
   * (uint16) End Device Queued Poll Rate (not applicable for routers)
   */
  protobuf_c_boolean has_queuedpollrate;
  uint32_t queuedpollrate;
  /*
   * (uint16) End Device Response Poll Rate (not applicable for routers)
   */
  protobuf_c_boolean has_responsepollrate;
  uint32_t responsepollrate;
  /*
   * (uint16) APS Ack Waite Duration
   */
  protobuf_c_boolean has_apsackwaitduration;
  uint32_t apsackwaitduration;
  /*
   * (uint16) Binding Time
   */
  protobuf_c_boolean has_bindingtime;
  uint32_t bindingtime;
  /*
   * (uint16) PAN ID
   */
  protobuf_c_boolean has_panid;
  uint32_t panid;
  /*
   * (uint8) End Device Poll Failure Retries (not applicable for routers)
   */
  protobuf_c_boolean has_pollfailureretries;
  uint32_t pollfailureretries;
  /*
   * (uint8) Indirect Message Timeout
   */
  protobuf_c_boolean has_indirectmsgtimeout;
  uint32_t indirectmsgtimeout;
  /*
   * (uint8) APS Frame Retries
   */
  protobuf_c_boolean has_apsframeretries;
  uint32_t apsframeretries;
  /*
   * (uint8) Broadcast Retries
   */
  protobuf_c_boolean has_bcastretries;
  uint32_t bcastretries;
  /*
   * (uint8) Passive Ack Timeout
   */
  protobuf_c_boolean has_passiveacktimeout;
  uint32_t passiveacktimeout;
  /*
   * (uint8) Broadcast Delivery Time
   */
  protobuf_c_boolean has_bcastdeliverytime;
  uint32_t bcastdeliverytime;
  /*
   * (uint8) Route Expiry Time
   */
  protobuf_c_boolean has_routeexpirytime;
  uint32_t routeexpirytime;
  /*
   * User Descriptor (16 bytes max)
   */
  protobuf_c_boolean has_userdesc;
  ProtobufCBinaryData userdesc;
  /*
   * PreConfig Key (16 bytes)
   */
  protobuf_c_boolean has_preconfigkey;
  ProtobufCBinaryData preconfigkey;
  /*
   * Channel List (bitmap) - 
   * Channels are defined in the following:
   * 0 : 868 MHz (0x00000001),
   * 1 - 10 : 915 MHz (0x000007FE),
   * 11 - 26 : 2.4 GHz (0x07FFF800)
   */
  protobuf_c_boolean has_chanlist;
  uint32_t chanlist;
  /*
   * (uint8) Multicast radius 
   */
  protobuf_c_boolean has_multicastradius;
  uint32_t multicastradius;
  /*
   * 64 bit extended PAN ID (APS USE)
   */
  protobuf_c_boolean has_extendedpanid;
  uint64_t extendedpanid;
  /*
   * 64 bit extended IEEE address
   */
  protobuf_c_boolean has_ieeeaddr;
  uint64_t ieeeaddr;
  /*
   * the MAC's RxOnIdle parameter
   */
  protobuf_c_boolean has_macrxonidle;
  protobuf_c_boolean macrxonidle;
  /*
   * set to control the sniffer feature (if supported)
   */
  protobuf_c_boolean has_snifferfeature;
  protobuf_c_boolean snifferfeature;
  /*
   * the concentrator enable flag (TRUE to enable)
   */
  protobuf_c_boolean has_concentratorenable;
  protobuf_c_boolean concentratorenable;
  /*
   * (uint8) concentrator discovery time in seconds
   */
  protobuf_c_boolean has_concentratordisctime;
  uint32_t concentratordisctime;
};
#define SYS_CONFIG_WRITE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_config_write_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_CONFIG_WRITE_REQ, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _SysSetTxPowerReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (int8) requested Tx power setting, in dBm
   */
  int32_t requestedtxpower;
};
#define SYS_SET_TX_POWER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_set_tx_power_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_SET_TX_POWER_REQ, 0 }


struct  _SysNwkInfoReadReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
};
#define SYS_NWK_INFO_READ_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_nwk_info_read_req__descriptor) \
    , ZSTACK_CMD_IDS__SYS_NWK_INFO_READ_REQ }


struct  _SysResetInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * The reason for the reset
   */
  ResetReasons reason;
  /*
   * (uint8) Transport protocol revision, this is set to a value of 2
   */
  uint32_t transportrev;
  /*
   * (uint8) Product ID, this is set to a value of 1
   */
  uint32_t product;
  /*
   * (uint8) Major release number
   */
  uint32_t majorrel;
  /*
   * (uint8) Minor release number
   */
  uint32_t minorrel;
  /*
   * (uint8) Hardware revision number
   */
  uint32_t hwrev;
};
#define SYS_RESET_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_reset_ind__descriptor) \
    , ZSTACK_CMD_IDS__SYS_RESET_IND, 0, 0, 0, 0, 0, 0 }


struct  _SysVersionRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Transport protocol revision, ZStack Proto API Version
   */
  ZStackAPIVersion transportrev;
  /*
   * Product ID - Device type
   */
  ZStackServerType product;
  /*
   * (uint8) Major release number
   */
  uint32_t majorrel;
  /*
   * (uint8) Minor release number
   */
  uint32_t minorrel;
  /*
   * (uint8) Maintenance revision number
   */
  uint32_t maintrel;
};
#define SYS_VERSION_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_version_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SYS_VERSION_RSP, 0, 0, 0, 0, 0 }


struct  _SysConfigReadRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Pre Config Key Enable
   */
  protobuf_c_boolean has_preconfigkeyenable;
  protobuf_c_boolean preconfigkeyenable;
  /*
   * Security Mode Enable (nwk)
   */
  protobuf_c_boolean has_securitymodeenable;
  protobuf_c_boolean securitymodeenable;
  /*
   * Enable the use of the preconfig Trust Center Link Key
   */
  protobuf_c_boolean has_usedefaulttclk;
  protobuf_c_boolean usedefaulttclk;
  /*
   * (uint16) Poll Rate
   */
  protobuf_c_boolean has_pollrate;
  uint32_t pollrate;
  /*
   * (uint16) Queued Poll Rate
   */
  protobuf_c_boolean has_queuedpollrate;
  uint32_t queuedpollrate;
  /*
   * (uint16) Response Poll Rate
   */
  protobuf_c_boolean has_responsepollrate;
  uint32_t responsepollrate;
  /*
   * (uint16) APS Ack Waite Duration
   */
  protobuf_c_boolean has_apsackwaitduration;
  uint32_t apsackwaitduration;
  /*
   * (uint16) Binding Time
   */
  protobuf_c_boolean has_bindingtime;
  uint32_t bindingtime;
  /*
   * (uint16) PAN ID
   */
  protobuf_c_boolean has_panid;
  uint32_t panid;
  /*
   * (uint8) Poll Failure Retries
   */
  protobuf_c_boolean has_pollfailureretries;
  uint32_t pollfailureretries;
  /*
   * (uint8) Indirect Message Timeout
   */
  protobuf_c_boolean has_indirectmsgtimeout;
  uint32_t indirectmsgtimeout;
  /*
   * (uint8) APS Frame Retries
   */
  protobuf_c_boolean has_apsframeretries;
  uint32_t apsframeretries;
  /*
   * (uint8) Broadcast Retries
   */
  protobuf_c_boolean has_bcastretries;
  uint32_t bcastretries;
  /*
   * (uint8) Passive Ack Timeout
   */
  protobuf_c_boolean has_passiveacktimeout;
  uint32_t passiveacktimeout;
  /*
   * (uint8) Broadcast Delivery Time
   */
  protobuf_c_boolean has_bcastdeliverytime;
  uint32_t bcastdeliverytime;
  /*
   * (uint8) Route Expiry Time
   */
  protobuf_c_boolean has_routeexpirytime;
  uint32_t routeexpirytime;
  /*
   * User Descriptor (16 bytes max)
   */
  protobuf_c_boolean has_userdesc;
  ProtobufCBinaryData userdesc;
  /*
   * PreConfig Key (16 bytes)
   */
  protobuf_c_boolean has_preconfigkey;
  ProtobufCBinaryData preconfigkey;
  /*
   * Channel List (bitmap) - 
   * Channels are defined in the following:
   * 0 : 868 MHz (0x00000001),
   * 1 - 10 : 915 MHz (0x000007FE),
   * 11 - 26 : 2.4 GHz (0x07FFF800)
   */
  protobuf_c_boolean has_chanlist;
  uint32_t chanlist;
  /*
   * (uint8) Multicast radius 
   */
  protobuf_c_boolean has_multicastradius;
  uint32_t multicastradius;
  /*
   * 64 bit extended PAN ID  (APS USE)
   */
  protobuf_c_boolean has_extendedpanid;
  uint64_t extendedpanid;
  /*
   * 64 bit IEEE extended Address
   */
  protobuf_c_boolean has_ieeeaddr;
  uint64_t ieeeaddr;
  /*
   * the MAC's RxOnIdle parameter
   */
  protobuf_c_boolean has_macrxonidle;
  protobuf_c_boolean macrxonidle;
  /*
   * sniffer feature enable
   */
  protobuf_c_boolean has_snifferfeature;
  protobuf_c_boolean snifferfeature;
  /*
   * the concentrator enable flag (TRUE is enabled)
   */
  protobuf_c_boolean has_concentratorenable;
  protobuf_c_boolean concentratorenable;
  /*
   * (uint8) concentrator discovery time in seconds
   */
  protobuf_c_boolean has_concentratordisctime;
  uint32_t concentratordisctime;
};
#define SYS_CONFIG_READ_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_config_read_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SYS_CONFIG_READ_RSP, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _SysSetTxPowerRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (int8) actual TX power setting, in dBm
   */
  int32_t txpower;
};
#define SYS_SET_TX_POWER_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_set_tx_power_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SYS_SET_TX_POWER_RSP, 0 }


struct  _SysNwkInfoReadRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Currently assigned short address
   */
  uint32_t nwkaddr;
  /*
   * 64 bit IEEE Address
   */
  uint64_t ieeeaddr;
  /*
   * Current device state
   */
  DevState devstate;
  /*
   * (uint16) PAN ID
   */
  uint32_t panid;
  /*
   * 64 bit extended PAN ID
   */
  uint64_t extendedpanid;
  /*
   * (uint16) parent's short address
   */
  uint32_t coordaddr;
  /*
   * 64 bit parent's extended address
   */
  uint64_t coordextaddr;
  /*
   * possible device types
   */
  DeviceTypes *devtypes;
  /*
   * (uint8) current network logical channel
   */
  uint32_t logicalchannel;
};
#define SYS_NWK_INFO_READ_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_nwk_info_read_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SYS_NWK_INFO_READ_RSP, 0, 0, 0, 0, 0, 0, 0, NULL, 0 }


struct  _DevStartReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Time delay (milliseconds) before the device starts
   */
  uint32_t startdelay;
};
#define DEV_START_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_start_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_START_REQ, 0 }


struct  _DevNwkDiscReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint32) Bit Mask of channels to scan
   */
  uint32_t scanchannels;
  /*
   * (uint8) Scanning Time
   */
  uint32_t scanduration;
};
#define DEV_NWK_DISC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_nwk_disc_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_NWK_DISCOVERY_REQ, 0, 0 }


struct  _DevJoinReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Channel where the PAN is located
   */
  uint32_t logicalchannel;
  /*
   * (uint16) ID of the PAN to join
   */
  uint32_t panid;
  /*
   * 64 bit extended PAN ID, use all 0xFF if don't care
   */
  uint64_t extendedpanid;
  /*
   * (uint16) short address of parent device chosen to join
   */
  uint32_t chosenparent;
  /*
   * (uint8) depth of the parent
   */
  uint32_t parentdepth;
  /*
   * (uint8) stack profile of the network to join
   */
  uint32_t stackprofile;
};
#define DEV_JOIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_join_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_JOIN_REQ, 0, 0, 0, 0, 0, 0 }


struct  _DevRejoinReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True to perform an unsecure rejoin
   */
  protobuf_c_boolean unsecure;
  /*
   * (uint8) Channel where the PAN is located
   */
  uint32_t logicalchannel;
  /*
   * 64 bit extended PAN ID, use all 0xFF if don't care
   */
  uint64_t extendedpanid;
};
#define DEV_REJOIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_rejoin_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_REJOIN_REQ, 0, 0, 0 }


struct  _DevZDOCBReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Set to receive Source Route Indication
   */
  protobuf_c_boolean has_srcrtgindcb;
  protobuf_c_boolean srcrtgindcb;
  /*
   * Set to receive Concentrator Indication
   */
  protobuf_c_boolean has_concentratorindcb;
  protobuf_c_boolean concentratorindcb;
  /*
   * Set to receive Network Discovery Confirmation
   */
  protobuf_c_boolean has_nwkdisccnfcb;
  protobuf_c_boolean nwkdisccnfcb;
  /*
   * Set to receive Beacon Notify Indication
   */
  protobuf_c_boolean has_beaconnotindcb;
  protobuf_c_boolean beaconnotindcb;
  /*
   * Set to receive Join Confirmation
   */
  protobuf_c_boolean has_joincnfcb;
  protobuf_c_boolean joincnfcb;
  /*
   * Set to receive Leave Confirmation
   */
  protobuf_c_boolean has_leavecnfcb;
  protobuf_c_boolean leavecnfcb;
  /*
   * Set to receive Leave Indication
   */
  protobuf_c_boolean has_leaveindcb;
  protobuf_c_boolean leaveindcb;
  /*
   * Set to receive ZDO Network Address Response
   */
  protobuf_c_boolean has_nwkaddrrsp;
  protobuf_c_boolean nwkaddrrsp;
  /*
   * Set to receive ZDO IEEE Address Response
   */
  protobuf_c_boolean has_ieeeaddrrsp;
  protobuf_c_boolean ieeeaddrrsp;
  /*
   * Set to receive ZDO Node Descriptor Response
   */
  protobuf_c_boolean has_nodedescrsp;
  protobuf_c_boolean nodedescrsp;
  /*
   * Set to receive ZDO Power Descriptor Response
   */
  protobuf_c_boolean has_powerdescrsp;
  protobuf_c_boolean powerdescrsp;
  /*
   * Set to receive ZDO Simple Descriptor Response
   */
  protobuf_c_boolean has_simpledescrsp;
  protobuf_c_boolean simpledescrsp;
  /*
   * Set to receive ZDO Active Endpoint Response
   */
  protobuf_c_boolean has_activeendpointrsp;
  protobuf_c_boolean activeendpointrsp;
  /*
   * Set to receive ZDO Match Descriptor Response
   */
  protobuf_c_boolean has_matchdescrsp;
  protobuf_c_boolean matchdescrsp;
  /*
   * Set to receive ZDO Complex Descriptor Response
   */
  protobuf_c_boolean has_complexdescrsp;
  protobuf_c_boolean complexdescrsp;
  /*
   * Set to receive ZDO User Descriptor Response
   */
  protobuf_c_boolean has_userdescrsp;
  protobuf_c_boolean userdescrsp;
  /*
   * Set to receive ZDO Discovery Cache Response
   */
  protobuf_c_boolean has_discoverycachersp;
  protobuf_c_boolean discoverycachersp;
  /*
   * Set to receive ZDO User Descriptor Confirmation
   */
  protobuf_c_boolean has_userdesccnf;
  protobuf_c_boolean userdesccnf;
  /*
   * Set to receive ZDO Server Discovery Response
   */
  protobuf_c_boolean has_serverdiscoveryrsp;
  protobuf_c_boolean serverdiscoveryrsp;
  /*
   * Set to receive ZDO End Device Timeout Response
   */
  protobuf_c_boolean has_enddevicetimeoutrsp;
  protobuf_c_boolean enddevicetimeoutrsp;
  /*
   * Set to receive ZDO Bind Response
   */
  protobuf_c_boolean has_bindrsp;
  protobuf_c_boolean bindrsp;
  /*
   * Set to receive ZDO End Device Bind Response
   */
  protobuf_c_boolean has_enddevicebindrsp;
  protobuf_c_boolean enddevicebindrsp;
  /*
   * Set to receive ZDO Unbind Response
   */
  protobuf_c_boolean has_unbindrsp;
  protobuf_c_boolean unbindrsp;
  /*
   * Set to receive ZDO Management Network Discovery Response
   */
  protobuf_c_boolean has_mgmtnwkdiscrsp;
  protobuf_c_boolean mgmtnwkdiscrsp;
  /*
   * Set to receive ZDO Management LQI Response
   */
  protobuf_c_boolean has_mgmtlqirsp;
  protobuf_c_boolean mgmtlqirsp;
  /*
   * Set to receive ZDO Management Routing Response
   */
  protobuf_c_boolean has_mgmtrtgrsp;
  protobuf_c_boolean mgmtrtgrsp;
  /*
   * Set to receive ZDO Management Bind Response
   */
  protobuf_c_boolean has_mgmtbindrsp;
  protobuf_c_boolean mgmtbindrsp;
  /*
   * Set to receive ZDO Management Leave Response
   */
  protobuf_c_boolean has_mgmtleaversp;
  protobuf_c_boolean mgmtleaversp;
  /*
   * Set to receive ZDO Management Direct Join Response
   */
  protobuf_c_boolean has_mgmtdirectjoinrsp;
  protobuf_c_boolean mgmtdirectjoinrsp;
  /*
   * Set to receive ZDO Management Permit Join Response
   */
  protobuf_c_boolean has_mgmtpermitjoinrsp;
  protobuf_c_boolean mgmtpermitjoinrsp;
  /*
   * Set to receive ZDO Management Network Update Notify
   */
  protobuf_c_boolean has_mgmtnwkupdatenotify;
  protobuf_c_boolean mgmtnwkupdatenotify;
  /*
   * Set to receive Device Announce
   */
  protobuf_c_boolean has_deviceannounce;
  protobuf_c_boolean deviceannounce;
  /*
   * Set to receive Device State Change Indication
   */
  protobuf_c_boolean has_devstatechange;
  protobuf_c_boolean devstatechange;
  /*
   * Set to receive the Device Jammer Indication
   */
  protobuf_c_boolean has_devjammerind;
  protobuf_c_boolean devjammerind;
  /*
   * Set to receive the TC Device Indication
   */
  protobuf_c_boolean has_tcdeviceind;
  protobuf_c_boolean tcdeviceind;
  /*
   * Set to receive the Device Permit Join Indication
   */
  protobuf_c_boolean has_devpermitjoinind;
  protobuf_c_boolean devpermitjoinind;
};
#define DEV_ZDOCBREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_zdocbreq__descriptor) \
    , ZSTACK_CMD_IDS__DEV_ZDO_CBS_REQ, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _DevNwkRouteReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Network address to discover
   */
  uint32_t dstaddr;
  /*
   * TRUE if you are announcing a concentrator
   */
  protobuf_c_boolean has_mtoroute;
  protobuf_c_boolean mtoroute;
  /*
   * TRUE if the concentrator has limited cache (only set if mtoRoute is set)
   */
  protobuf_c_boolean has_mtonocache;
  protobuf_c_boolean mtonocache;
  /*
   * TRUE if the route requested is for a multicast address 
   */
  protobuf_c_boolean has_multicast;
  protobuf_c_boolean multicast;
  /*
   * (uint8) radius of the message
   */
  uint32_t radius;
};
#define DEV_NWK_ROUTE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_nwk_route_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_NWK_ROUTE_REQ, 0, 0,0, 0,0, 0,0, 0 }


struct  _DevNwkCheckRouteReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Network address to check if a route exists
   */
  uint32_t dstaddr;
  /*
   * TRUE if you're check for a Many-to-one route
   */
  protobuf_c_boolean mtoroute;
};
#define DEV_NWK_CHECK_ROUTE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_nwk_check_route_req__descriptor) \
    , ZSTACK_CMD_IDS__DEV_NWK_CHECK_ROUTE_REQ, 0, 0 }


struct  _DevJammerInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * TRUE if a jammer is detected, FALSE if jammer no longer detected
   */
  protobuf_c_boolean jammed;
};
#define DEV_JAMMER_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_jammer_ind__descriptor) \
    , ZSTACK_CMD_IDS__DEV_JAMMER_IND, 0 }


struct  _DevPermitJoinInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Duration of join. 0=disabled, 0xFF=enabled, 0x01-0xFE number seconds to permit join
   */
  uint32_t duration;
};
#define DEV_PERMIT_JOIN_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_permit_join_ind__descriptor) \
    , ZSTACK_CMD_IDS__DEV_PERMIT_JOIN_IND, 0 }


struct  _ApsRemoveGroup
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint
   */
  uint32_t endpoint;
  /*
   * (uint16) Group ID
   */
  uint32_t groupid;
};
#define APS_REMOVE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_remove_group__descriptor) \
    , ZSTACK_CMD_IDS__APS_REMOVE_GROUP, 0, 0 }


struct  _ApsRemoveAllGroups
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint to remove all groups from
   */
  uint32_t endpoint;
};
#define APS_REMOVE_ALL_GROUPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_remove_all_groups__descriptor) \
    , ZSTACK_CMD_IDS__APS_REMOVE_ALL_GROUPS, 0 }


struct  _ApsFindAllGroupsReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint to find all groups
   */
  uint32_t endpoint;
};
#define APS_FIND_ALL_GROUPS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_find_all_groups_req__descriptor) \
    , ZSTACK_CMD_IDS__APS_FIND_ALL_GROUPS_REQ, 0 }


struct  _ApsFindAllGroupsRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) List of groups
   */
  size_t n_grouplist;
  uint32_t *grouplist;
};
#define APS_FIND_ALL_GROUPS_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_find_all_groups_rsp__descriptor) \
    , ZSTACK_CMD_IDS__APS_FIND_ALL_GROUPS_RSP, 0,NULL }


struct  _ApsFindGroupReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint
   */
  uint32_t endpoint;
  /*
   * (uint16) group ID
   */
  uint32_t groupid;
};
#define APS_FIND_GROUP_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_find_group_req__descriptor) \
    , ZSTACK_CMD_IDS__APS_FIND_GROUP_REQ, 0, 0 }


struct  _ApsFindGroupRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) group ID, not include if not found
   */
  protobuf_c_boolean has_groupid;
  uint32_t groupid;
  /*
   * Human readable name of group
   */
  protobuf_c_boolean has_name;
  ProtobufCBinaryData name;
};
#define APS_FIND_GROUP_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_find_group_rsp__descriptor) \
    , ZSTACK_CMD_IDS__APS_FIND_GROUP_RSP, 0,0, 0,{0,NULL} }


struct  _ApsAddGroup
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint to remove all groups from
   */
  uint32_t endpoint;
  /*
   * (uint16) group ID
   */
  uint32_t groupid;
  /*
   * Human readable name of group
   */
  protobuf_c_boolean has_name;
  ProtobufCBinaryData name;
};
#define APS_ADD_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_add_group__descriptor) \
    , ZSTACK_CMD_IDS__APS_ADD_GROUP, 0, 0, 0,{0,NULL} }


struct  _ApsCountAllGroups
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
};
#define APS_COUNT_ALL_GROUPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&aps_count_all_groups__descriptor) \
    , ZSTACK_CMD_IDS__APS_COUNT_ALL_GROUPS }


struct  _AfRegisterReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint
   */
  uint32_t endpoint;
  /*
   * Simple Descriptor
   */
  SimpleDescriptor *simpledesc;
  /*
   * Network Latency Requirements
   */
  NetworkLatency latencyreq;
};
#define AF_REGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_register_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_REGISTER_REQ, 0, NULL, 0 }


struct  _AfUnRegisterReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint
   */
  uint32_t endpoint;
};
#define AF_UN_REGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_un_register_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_UNREGISTER_REQ, 0 }


struct  _AfDataReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Destination address
   */
  AFAddr *dstaddr;
  /*
   * optional arrary of hops (source routing)
   */
  size_t n_relaylist;
  uint32_t *relaylist;
  /*
   * (uint8) Source Endpoint
   */
  uint32_t srcendpoint;
  /*
   * (uint16) Cluster ID
   */
  uint32_t clusterid;
  /*
   * (uint8) transaction ID
   */
  uint32_t transid;
  /*
   * transaction options
   */
  TransOptions *options;
  /*
   * (uint4) network radius
   */
  uint32_t radius;
  /*
   * payload to send
   */
  ProtobufCBinaryData payload;
  /*
   * (uint8)
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   * (uint8)
   */
  protobuf_c_boolean has_power;
  uint32_t power;
};
#define AF_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_data_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_DATA_REQ, NULL, 0,NULL, 0, 0, 0, NULL, 0, {0,NULL}, 0,0, 0,0 }


struct  _AfInterPanCtlReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Set to turn on inter-PAN, Clear to switch back to NIB
   */
  protobuf_c_boolean enable;
  /*
   * (uint8) InterPan channel
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   * (uint8) Endpoint controller
   */
  protobuf_c_boolean has_endpoint;
  uint32_t endpoint;
  /*
   * (uint16) PAN ID
   */
  protobuf_c_boolean has_panid;
  uint32_t panid;
};
#define AF_INTER_PAN_CTL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_inter_pan_ctl_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_INTERPAN_CTL_REQ, 0, 0,0, 0,0, 0,0 }


struct  _AfConfigGetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint 
   */
  uint32_t endpoint;
};
#define AF_CONFIG_GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_config_get_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_INTERPAN_CTL_REQ, 0 }


struct  _AfConfigSetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Endpoint 
   */
  uint32_t endpoint;
  /*
   * (uint8) Fragmentation frame delay
   */
  uint32_t framedelay;
  /*
   * (uint8) Fragmentation window size
   */
  uint32_t windowsize;
};
#define AF_CONFIG_SET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_config_set_req__descriptor) \
    , ZSTACK_CMD_IDS__AF_CONFIG_SET_REQ, 0, 0, 0 }


/*
 *-----------------------------------------
 * AF Interface Response Messages
 *-----------------------------------------
 */
struct  _AfConfigGetRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) endpoint
   */
  uint32_t endpoint;
  /*
   * (uint8) Fragmentation frame delay
   */
  uint32_t framedelay;
  /*
   * (uint8) Fragmentation window size
   */
  uint32_t windowsize;
};
#define AF_CONFIG_GET_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_config_get_rsp__descriptor) \
    , ZSTACK_CMD_IDS__AF_CONFIG_GET_RSP, 0, 0, 0 }


struct  _AfDataConfirmInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * status
   */
  ZStatusValues status;
  /*
   * (uint8) Endpoint
   */
  uint32_t endpoint;
  /*
   * (uint8) transaction ID
   */
  uint32_t transid;
};
#define AF_DATA_CONFIRM_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_data_confirm_ind__descriptor) \
    , ZSTACK_CMD_IDS__AF_DATA_CONFIRM_IND, 0, 0, 0 }


struct  _AfIncomingMsgInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Source Address, if endpoint is 0xFE, it's an interPAN message
   */
  AFAddr *srcaddr;
  /*
   * (uint16) Message's group ID - 0 if not group message
   */
  uint32_t groupid;
  /*
   * (uint16) Message's clusterID
   */
  uint32_t clusterid;
  /*
   * (uint16) MAC header destination short address
   */
  uint32_t macdestaddr;
  /*
   * (uint8) destination endpoint
   */
  uint32_t endpoint;
  /*
   * Set if network destination was a broadcast address
   */
  protobuf_c_boolean wasbroadcast;
  /*
   * Set if APS security was used 
   */
  protobuf_c_boolean securityuse;
  /*
   * (uint8) The link quality of the received data frame
   */
  uint32_t linkquality;
  /*
   * (uint8) The raw correlation value of the received data frame
   */
  uint32_t correlation;
  /*
   * (int8) The received RF power in units dBm
   */
  int32_t rssi;
  /*
   * (uint32) receipt timestamp from MAC
   */
  uint32_t timestamp;
  /*
   * (uint8) network header frame sequence number
   */
  uint32_t nwkseqnum;
  /*
   * (uint16) MAC header source short address
   */
  uint32_t macsrcaddr;
  /*
   * (uint8) transaction sequence number
   */
  uint32_t transseqnum;
  /*
   * message payload
   */
  ProtobufCBinaryData payload;
};
#define AF_INCOMING_MSG_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_incoming_msg_ind__descriptor) \
    , ZSTACK_CMD_IDS__AF_INCOMING_MSG_IND, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL} }


struct  _AfReflectErrorInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * status of APSDE_DATA_REQUEST
   */
  ZStatusValues status;
  /*
   * Destination Address
   */
  AFAddr *dstaddr;
  /*
   * Transaction ID
   */
  uint32_t transid;
};
#define AF_REFLECT_ERROR_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&af_reflect_error_ind__descriptor) \
    , ZSTACK_CMD_IDS__AF_REFLECT_ERROR_IND, 0, NULL, 0 }


struct  _ZdoNwkAddrReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Known IEEE Address
   */
  uint64_t ieeeaddr;
  /*
   * Request Type
   */
  NwkAddrReqType type;
  /*
   * Starting index into the list of children. 
   */
  uint32_t startindex;
};
#define ZDO_NWK_ADDR_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_nwk_addr_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_NWK_ADDR_REQ, 0, 0, 0 }


struct  _ZdoIeeeAddrReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Known short address
   */
  uint32_t nwkaddr;
  /*
   * Request Type
   */
  NwkAddrReqType type;
  /*
   * (uint8) Starting index into the list of children. 
   */
  uint32_t startindex;
};
#define ZDO_IEEE_ADDR_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_ieee_addr_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_IEEE_ADDR_REQ, 0, 0, 0 }


struct  _ZdoNodeDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
};
#define ZDO_NODE_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_node_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_NODE_DESC_REQ, 0, 0 }


struct  _ZdoPowerDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
};
#define ZDO_POWER_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_power_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_POWER_DESC_REQ, 0, 0 }


struct  _ZdoSimpleDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
  /*
   * (uint8) application endpoint being queried
   */
  uint32_t endpoint;
};
#define ZDO_SIMPLE_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_simple_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_SIMPLE_DESC_REQ, 0, 0, 0 }


struct  _ZdoActiveEndpointReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
};
#define ZDO_ACTIVE_ENDPOINT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_active_endpoint_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_ACTIVE_ENDPOINT_REQ, 0, 0 }


struct  _ZdoMatchDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
  /*
   * (uint16) the profile ID of the device
   */
  uint32_t profileid;
  /*
   * Array of (uint16) input clusters
   */
  size_t n_inputclusters;
  uint32_t *inputclusters;
  /*
   * Array of (uint16) output clusters
   */
  size_t n_outputclusters;
  uint32_t *outputclusters;
};
#define ZDO_MATCH_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_match_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MATCH_DESC_REQ, 0, 0, 0, 0,NULL, 0,NULL }


struct  _ZdoComplexDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
};
#define ZDO_COMPLEX_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_complex_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_COMPLEX_DESC_REQ, 0, 0 }


struct  _ZdoUserDescReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
};
#define ZDO_USER_DESC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_user_desc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_USER_DESC_REQ, 0, 0 }


struct  _ZdoDeviceAnnounceReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) network address of device generating
   */
  uint32_t nwkaddr;
  /*
   * 64 bit IEEE Address of device
   */
  uint64_t ieeeaddr;
  /*
   * MAC capabilities
   */
  CapabilityInfo *capabilities;
};
#define ZDO_DEVICE_ANNOUNCE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_device_announce_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE_REQ, 0, 0, NULL }


struct  _ZdoUserDescSetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * (uint16) the network address of the destination device being queried.
   */
  uint32_t nwkaddrofinterest;
  /*
   * up to 16 bytes of description
   */
  ProtobufCBinaryData userdescriptor;
};
#define ZDO_USER_DESC_SET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_user_desc_set_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_USER_DESCR_SET_REQ, 0, 0, {0,NULL} }


struct  _ZdoServerDiscReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Looking for these capabilities
   */
  ServerCapabilities *servermask;
};
#define ZDO_SERVER_DISC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_server_disc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_SERVER_DISC_REQ, NULL }


struct  _ZdoEndDeviceBindReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address, usually 0x0000 for coordinator
   */
  uint32_t dstaddr;
  /*
   * (uint16) local coordinator short address
   */
  uint32_t localcoordinator;
  /*
   * local coordinator's IEEE Address
   */
  uint64_t ieee;
  /*
   * (uint8) device's endpoint
   */
  uint32_t endpoint;
  /*
   * (uint16) profile ID
   */
  uint32_t profileid;
  /*
   * Array of (uint16) input clusters
   */
  size_t n_inputclusters;
  uint32_t *inputclusters;
  /*
   * Array of (uint16) output clusters
   */
  size_t n_outputclusters;
  uint32_t *outputclusters;
};
#define ZDO_END_DEVICE_BIND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_end_device_bind_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_END_DEVICE_BIND_REQ, 0, 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _ZdoBindReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * Binding Record
   */
  BindRec *bindinfo;
};
#define ZDO_BIND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_bind_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_BIND_REQ, 0, NULL }


struct  _ZdoUnbindReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * Binding Record
   */
  BindRec *bindinfo;
};
#define ZDO_UNBIND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_unbind_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_UNBIND_REQ, 0, NULL }


struct  _ZdoMgmtNwkDiscReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * (uint32) Bit Mask of channels to scan
   */
  uint32_t scanchannels;
  /*
   * (uint8) Scanning Time.  Valid range is 0-14.
   */
  uint32_t scanduration;
  /*
   * (uint8) start index for the response array list.
   */
  uint32_t startindex;
};
#define ZDO_MGMT_NWK_DISC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_nwk_disc_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_NWK_DISC_REQ, 0, 0, 0, 0 }


struct  _ZdoMgmtLqiReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) start index for the response array list.
   */
  uint32_t startindex;
};
#define ZDO_MGMT_LQI_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_lqi_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_LQI_REQ, 0, 0 }


struct  _ZdoMgmtRtgReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) start index for the response array list.
   */
  uint32_t startindex;
};
#define ZDO_MGMT_RTG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_rtg_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_RTG_REQ, 0, 0 }


struct  _ZdoMgmtBindReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) start index for the response array list.
   */
  uint32_t startindex;
};
#define ZDO_MGMT_BIND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_bind_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_BIND_REQ, 0, 0 }


struct  _ZdoMgmtLeaveReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * 64 bit IEEE address of the device to leave the network
   */
  uint64_t deviceaddress;
  /*
   * leave options
   */
  LeaveOptions *options;
};
#define ZDO_MGMT_LEAVE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_leave_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_LEAVE_REQ, 0, 0, NULL }


struct  _ZdoMgmtDirectJoinReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * 64 bit IEEE address of the device to be joined to nwkAddr
   */
  uint64_t deviceaddress;
  /*
   * MAC capabilities
   */
  CapabilityInfo *capinfo;
};
#define ZDO_MGMT_DIRECT_JOIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_direct_join_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_DIRECT_JOIN_REQ, 0, 0, NULL }


struct  _ZdoMgmtPermitJoinReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) Duration of join. 0=disabled, 0xFF=enabled, 0x01-0xFE number seconds to permit join
   */
  uint32_t duration;
  /*
   * (uint8) if set, and the target device is TC, it affects TC auth policy
   */
  protobuf_c_boolean tcsignificance;
};
#define ZDO_MGMT_PERMIT_JOIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_permit_join_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_PERMIT_JOIN_REQ, 0, 0, 0 }


struct  _ZdoMgmtNwkUpdateReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) targeted device (unicast or 0xFFFD)
   */
  uint32_t dstaddr;
  /*
   * (uint32) Bit masked channel selection
   */
  uint32_t channelmask;
  /*
   * (uint8) MAC Scan duration. Range 0x00-0x05, 0xFE or 0xFF
   */
  uint32_t scanduration;
  /*
   * (uint8) number of energy scans to perform and report
   */
  uint32_t scancount;
  /*
   * (uint8) This value is set by the Network Channel Manager prior to sending the message
   */
  uint32_t nwkupdateid;
  /*
   * (uint16) nwk address of the Network Manager
   */
  uint32_t nwkmgraddr;
};
#define ZDO_MGMT_NWK_UPDATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_nwk_update_req__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_NWK_UPDATE_REQ, 0, 0, 0, 0, 0, 0 }


struct  _ZdoNwkAddrRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * 64 bit IEEE address of source device
   */
  uint64_t ieeeaddr;
  /*
   * (uint16) network address of the responding device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) starting index into the list of associated devices
   */
  uint32_t startindex;
  /*
   * Array of (uint16) associated devices
   */
  size_t n_assocdevlist;
  uint32_t *assocdevlist;
};
#define ZDO_NWK_ADDR_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_nwk_addr_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_NWK_ADDR_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoIeeeAddrRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * 64 bit IEEE address of source device
   */
  uint64_t ieeeaddr;
  /*
   * (uint16) network address of the responding device
   */
  uint32_t nwkaddr;
  /*
   * (uint8) starting index into the list of associated devices
   */
  uint32_t startindex;
  /*
   * Array of (uint16) associated devices
   */
  size_t n_assocdevlist;
  uint32_t *assocdevlist;
};
#define ZDO_IEEE_ADDR_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_ieee_addr_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_IEEE_ADDR_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoNodeDescRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this node descriptor
   */
  uint32_t nwkaddrofinterest;
  /*
   * Node Descriptor
   */
  NodeDescriptor *nodedesc;
};
#define ZDO_NODE_DESC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_node_desc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_NODE_DESC_RSP, 0, 0, 0, NULL }


struct  _ZdoPowerDescRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this power descriptor
   */
  uint32_t nwkaddrofinterest;
  /*
   * Power Descriptor
   */
  PowerDescriptor *powerdesc;
};
#define ZDO_POWER_DESC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_power_desc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_POWER_DESC_RSP, 0, 0, 0, NULL }


struct  _ZdoSimpleDescRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this descriptor
   */
  uint32_t nwkaddrofinterest;
  /*
   * Simple Descriptor
   */
  SimpleDescriptor *simpledesc;
};
#define ZDO_SIMPLE_DESC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_simple_desc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_SIMPLE_DESC_RSP, 0, 0, 0, NULL }


struct  _ZdoActiveEndpointsRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this active endpoint list
   */
  uint32_t nwkaddrofinterest;
  /*
   * Array of endpoints (uint8)
   */
  size_t n_activeeplist;
  uint32_t *activeeplist;
};
#define ZDO_ACTIVE_ENDPOINTS_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_active_endpoints_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_ACTIVE_EP_RSP, 0, 0, 0, 0,NULL }


struct  _ZdoMatchDescRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this match descriptor
   */
  uint32_t nwkaddrofinterest;
  /*
   * Array of matching endpoints (uint8)
   */
  size_t n_matchlist;
  uint32_t *matchlist;
};
#define ZDO_MATCH_DESC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_match_desc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MATCH_DESC_RSP, 0, 0, 0, 0,NULL }


struct  _ZdoUserDescRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint16) network address of this match descriptor
   */
  uint32_t nwkaddrofinterest;
  /*
   * Array of descriptor bytes (uint8)
   */
  ProtobufCBinaryData desc;
};
#define ZDO_USER_DESC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_user_desc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_USER_DESC_RSP, 0, 0, 0, {0,NULL} }


struct  _ZdoServerDiscoveryRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * Server Capabilities
   */
  ServerCapabilities *servercap;
};
#define ZDO_SERVER_DISCOVERY_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_server_discovery_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_SERVER_DISC_RSP, 0, 0, NULL }


struct  _ZdoEndDeviceTimeoutRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint8) timeout value
   */
  uint32_t timeout;
};
#define ZDO_END_DEVICE_TIMEOUT_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_end_device_timeout_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_END_DEVICE_TIMEOUT_RSP, 0, 0, 0 }


struct  _ZdoBindRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_BIND_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_bind_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_BIND_RSP, 0, 0 }


struct  _ZdoEndDeviceBindRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_END_DEVICE_BIND_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_end_device_bind_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_END_DEVICE_BIND_RSP, 0, 0 }


struct  _ZdoUnbindRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_UNBIND_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_unbind_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_UNBIND_RSP, 0, 0 }


struct  _ZdoDeviceAnnounceInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * (uint16) Device short address
   */
  uint32_t devaddr;
  /*
   * Devices IEEE Address (64-bit)
   */
  uint64_t devextaddr;
  /*
   * Device's Capabilities
   */
  CapabilityInfo *capinfo;
};
#define ZDO_DEVICE_ANNOUNCE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_device_announce_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE, 0, 0, 0, NULL }


struct  _ZdoDeviceAnnounceShadowInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  uint32_t srcaddr;
  uint32_t devaddr;
  uint64_t devextaddr;
  CapabilityInfo *capinfo;
};
#define ZDO_DEVICE_ANNOUNCE_SHADOW_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_device_announce_shadow_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_DEVICE_ANNOUNCE_SHADOW, 0, 0, 0, NULL }


struct  _ZdoMgmtNwkDiscRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint8) The total number of networks reported
   */
  uint32_t networkcount;
  /*
   * (uint8) The starting point in the networkList
   */
  uint32_t startindex;
  /*
   * array of networks  
   */
  size_t n_netlist;
  NwkDiscItem **netlist;
};
#define ZDO_MGMT_NWK_DISC_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_nwk_disc_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_NWK_DISC_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoMgmtLqiRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint8) The total number of neighbors
   */
  uint32_t neighborlqientries;
  /*
   * (uint8) The starting point in the LQI List
   */
  uint32_t startindex;
  /*
   * array of neighbor LQI info  
   */
  size_t n_lqilist;
  NeighborLqiItem **lqilist;
};
#define ZDO_MGMT_LQI_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_lqi_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_LQI_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoMgmtRtgRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint8) The total number of routing entries available
   */
  uint32_t rtgentries;
  /*
   * (uint8) The starting point in the routing List
   */
  uint32_t startindex;
  /*
   * array of routing items  
   */
  size_t n_rtglist;
  RtgItem **rtglist;
};
#define ZDO_MGMT_RTG_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_rtg_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_RTG_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoMgmtBindRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address, who we received this message from
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * (uint8) The total number of binding entries available
   */
  uint32_t bindentries;
  /*
   * (uint8) The starting point in the binding List
   */
  uint32_t startindex;
  /*
   * array of binding items  
   */
  size_t n_bindlist;
  BindItem **bindlist;
};
#define ZDO_MGMT_BIND_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_bind_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_BIND_RSP, 0, 0, 0, 0, 0,NULL }


struct  _ZdoMgmtLeaveRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address, who we received this message from
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_MGMT_LEAVE_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_leave_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_LEAVE_RSP, 0, 0 }


struct  _ZdoMgmtDirectJoinRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address, who we received this message from
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_MGMT_DIRECT_JOIN_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_direct_join_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_DIRECT_JOIN_RSP, 0, 0 }


struct  _ZdoMgmtPermitJoinRspInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address, who we received this message from
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
};
#define ZDO_MGMT_PERMIT_JOIN_RSP_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_permit_join_rsp_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_PERMIT_JOIN_RSP, 0, 0 }


struct  _ZdoMgmtNwkUpdateNotifyInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address, who we received this message from
   */
  uint32_t srcaddr;
  /*
   * Response status
   */
  ZdpStatus status;
  /*
   * Bitmap - list of channels scanned by the request.
   */
  uint32_t scannedchannels;
  /*
   * (uint16) Count of the total transmissions
   */
  uint32_t totaltrans;
  /*
   * (uint16) Sum of the total transmission failures
   */
  uint32_t transfails;
  /*
   * Array of bytes, each representing the energy value for each scanned channel
   */
  size_t n_energyvalueslist;
  uint32_t *energyvalueslist;
};
#define ZDO_MGMT_NWK_UPDATE_NOTIFY_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_mgmt_nwk_update_notify_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_MGMT_NWK_UPDATE_NOTIFY, 0, 0, 0, 0, 0, 0,NULL }


struct  _ZdoTcDeviceInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) The joining device's network address
   */
  uint32_t nwkaddr;
  /*
   * The joining device's 64-bit extended address
   */
  uint64_t extendedaddr;
  /*
   * (uint16) the device's parent's network address
   */
  uint32_t parentaddr;
};
#define ZDO_TC_DEVICE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_tc_device_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_TC_DEVICE_IND, 0, 0, 0 }


/*
 *-----------------------------------------
 * ZDO Interface Confirm/Indication Messages
 *-----------------------------------------
 */
struct  _ZdoSrcRtgInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t srcaddr;
  /*
   * (uint8) relay count
   */
  uint32_t relaycnt;
  /*
   * Array of relay short addresses(uint16)
   */
  size_t n_relay;
  uint32_t *relay;
};
#define ZDO_SRC_RTG_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_src_rtg_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_SRC_RTG_IND, 0, 0, 0,NULL }


struct  _ZdoConcentratorInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Network address
   */
  uint32_t nwkaddr;
  /*
   * (uint8) pkt Cost
   */
  uint32_t pktcost;
  /*
   * 64 bit IEEE address of concentrator device
   */
  uint64_t ieeeaddr;
};
#define ZDO_CONCENTRATOR_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_concentrator_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_CONCENTRATOR_IND, 0, 0, 0 }


struct  _ZdoNwkDiscCnf
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) Network discovery status
   */
  uint32_t status;
};
#define ZDO_NWK_DISC_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_nwk_disc_cnf__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_NWK_DISC_CNF, 0 }


struct  _ZdoBeaconNotifyInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Source address
   */
  uint32_t sourceaddr;
  /*
   * (uint16) PAN ID
   */
  uint32_t panid;
  /*
   * (uint8) logical channel
   */
  uint32_t logicalchannel;
  /*
   * Set if joining allowed
   */
  protobuf_c_boolean permitjoining;
  /*
   * Set if there is router capacity available
   */
  protobuf_c_boolean routercapacity;
  /*
   * Set if there is device capacity available
   */
  protobuf_c_boolean devicecapacity;
  /*
   * (uint8) protocol version
   */
  uint32_t protocolversion;
  /*
   * (uint8) stack profile 
   */
  uint32_t stackprofile;
  /*
   * (uint8) LQI
   */
  uint32_t lqi;
  /*
   * (uint8) network depth
   */
  uint32_t depth;
  /*
   * (uint8) update ID
   */
  uint32_t updateid;
  /*
   * 64 bit extended PAN ID
   */
  uint64_t extendedpanid;
};
#define ZDO_BEACON_NOTIFY_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_beacon_notify_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_BEACON_NOTIFY_IND, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ZdoJoinCnf
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Join confirm status
   */
  ZStatusValues status;
  /*
   * (uint16) Network address of joining
   */
  uint32_t devaddr;
  /*
   * (uint16) Parent's network address
   */
  uint32_t parentaddr;
};
#define ZDO_JOIN_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_join_cnf__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_JOIN_CNF, 0, 0, 0 }


struct  _ZdoLeaveCnf
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) destination address
   */
  uint32_t dstaddr;
  /*
   * 64 extended address
   */
  uint64_t extendedaddr;
  /*
   * Set if remove children option set
   */
  protobuf_c_boolean removechildren;
  /*
   * Set if a rejoin is expected, Cleared if not to rejoin network
   */
  protobuf_c_boolean rejoin;
  /*
   * (uint8) leave status
   */
  uint32_t status;
};
#define ZDO_LEAVE_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_leave_cnf__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_LEAVE_CNF, 0, 0, 0, 0, 0 }


struct  _ZdoLeaveInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) source address
   */
  uint32_t srcaddr;
  /*
   * 64-bit extended address
   */
  uint64_t extendedaddr;
  /*
   * (uint8) request
   */
  uint32_t request;
  /*
   * Set if remove children option set
   */
  protobuf_c_boolean removechildren;
  /*
   * Set if a rejoin is expected, Cleared if not to rejoin network
   */
  protobuf_c_boolean rejoin;
};
#define ZDO_LEAVE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zdo_leave_ind__descriptor) \
    , ZSTACK_CMD_IDS__ZDO_LEAVE_IND, 0, 0, 0, 0, 0 }


struct  _AppCnfCommissioningNotification
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  CommNotification status;
  uint32_t commmode;
  uint32_t remainingcommmode;
};
#define APP_CNF_COMMISSIONING_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app_cnf_commissioning_notification__descriptor) \
    , ZSTACK_CMD_IDS__APP_CNF_COMMISSIONING_NOTIFICATION, 0, 0, 0 }


struct  _DevStateChangeInd
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * new state
   */
  DevState state;
};
#define DEV_STATE_CHANGE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_state_change_ind__descriptor) \
    , ZSTACK_CMD_IDS__DEV_STATE_CHANGE_IND, 0 }


/*
 *-----------------------------------------
 * Security Interface Request Messages
 *-----------------------------------------
 */
struct  _SecNwkKeyGetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True to get the active key information, False to get the alternate key
   */
  protobuf_c_boolean activekey;
};
#define SEC_NWK_KEY_GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_nwk_key_get_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_NWK_KEY_GET_REQ, 0 }


struct  _SecNwkKeySetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True to set the active key information, False to set the alternate key
   */
  protobuf_c_boolean activekey;
  /*
   * (uint8) key sequence number
   */
  uint32_t seqnum;
  /*
   * 16 bytes of key data, if not included the key is randomly generated.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
};
#define SEC_NWK_KEY_SET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_nwk_key_set_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_NWK_KEY_SET_REQ, 0, 0, 0,{0,NULL} }


struct  _SecNwkKeyUpdateReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) key sequence number
   */
  uint32_t seqnum;
  /*
   * (uint16) destination address - network address or broadcast address (0xFFFF, 0xFFFC, or 0xFFFD)
   */
  uint32_t dstaddr;
};
#define SEC_NWK_KEY_UPDATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_nwk_key_update_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_NWK_KEY_UPDATE_REQ, 0, 0 }


struct  _SecNwkKeySwitchReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint8) key sequence number
   */
  uint32_t seqnum;
  /*
   * (uint16) destination address - network address or broadcast address (0xFFFF, 0xFFFC, or 0xFFFD)
   */
  uint32_t dstaddr;
};
#define SEC_NWK_KEY_SWITCH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_nwk_key_switch_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_NWK_KEY_SWITCH_REQ, 0, 0 }


struct  _SecApsLinkKeyGetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * TRUE if TC Link Key, False if link key
   */
  protobuf_c_boolean tclinkkey;
  /*
   * IEEE Address of the Link Key wanted
   */
  uint64_t ieeeaddr;
};
#define SEC_APS_LINK_KEY_GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_aps_link_key_get_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_APS_LINKKEY_GET_REQ, 0, 0 }


struct  _SecApsLinkKeySetReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True if the key information is for a TC Link Key, false if not
   */
  protobuf_c_boolean tclinkkey;
  /*
   * must be included for a new non-TC Link Key (ignored for TC Link Key)
   */
  protobuf_c_boolean has_shortaddr;
  uint32_t shortaddr;
  /*
   * IEEE Address of the Link Key, USE 0xFFFFFFFFFFFFFFFF for global(only for TC Link Key)
   */
  uint64_t ieeeaddr;
  /*
   * 16 bytes of key data
   */
  ProtobufCBinaryData key;
  /*
   * (uint32) Transmit frame counter (0 if not included and new Link Keys)
   */
  protobuf_c_boolean has_txfrmcntr;
  uint32_t txfrmcntr;
  /*
   * (uint32) receive frame counter (0 if not included and new Link Keys)
   */
  protobuf_c_boolean has_rxfrmcntr;
  uint32_t rxfrmcntr;
};
#define SEC_APS_LINK_KEY_SET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_aps_link_key_set_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_APS_LINKKEY_SET_REQ, 0, 0,0, 0, {0,NULL}, 0,0, 0,0 }


struct  _SecApsLinkKeyRemoveReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * True if the key information is for a TC Link Key, false if not
   */
  protobuf_c_boolean tclinkkey;
  /*
   * IEEE Address of the Link Key
   */
  uint64_t ieeeaddr;
};
#define SEC_APS_LINK_KEY_REMOVE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_aps_link_key_remove_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_APS_LINKKEY_REMOVE_REQ, 0, 0 }


struct  _SecApsRemoveReq
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * (uint16) Parent's Short Address
   */
  uint32_t parentaddr;
  /*
   * (uint16) Device's NWK Address
   */
  uint32_t nwkaddr;
  /*
   * Device's Extended IEEE Address
   */
  uint64_t extaddr;
};
#define SEC_APS_REMOVE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_aps_remove_req__descriptor) \
    , ZSTACK_CMD_IDS__SEC_APS_REMOVE_REQ, 0, 0, 0 }


/*
 *-----------------------------------------
 * Security Interface Response Messages
 *-----------------------------------------
 */
struct  _SecNwkKeyGetRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Get status
   */
  ZStatusValues status;
  /*
   * True for the active key information, False for the alternate key information
   */
  protobuf_c_boolean activekey;
  /*
   * (uint8) key sequence number
   */
  uint32_t seqnum;
  /*
   * 16 bytes of key data
   */
  ProtobufCBinaryData key;
};
#define SEC_NWK_KEY_GET_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_nwk_key_get_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SEC_NWK_KEY_GET_RSP, 0, 0, 0, {0,NULL} }


struct  _SecApsLinkKeyGetRsp
{
  ProtobufCMessage base;
  /*
   * don't change this field
   */
  ZStackCmdIDs cmdid;
  /*
   * Get status
   */
  ZStatusValues status;
  /*
   * True if the key information is for a TC Link Key, false if not
   */
  protobuf_c_boolean tclinkkey;
  /*
   * IEEE Address of the Link Key wanted
   */
  uint64_t ieeeaddr;
  /*
   * 16 bytes of key data
   */
  ProtobufCBinaryData key;
  /*
   * (uint32) Transmit frame counter
   */
  uint32_t txfrmcntr;
  /*
   * (uint32) receive frame counter
   */
  uint32_t rxfrmcntr;
};
#define SEC_APS_LINK_KEY_GET_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sec_aps_link_key_get_rsp__descriptor) \
    , ZSTACK_CMD_IDS__SEC_APS_LINKKEY_GET_RSP, 0, 0, 0, {0,NULL}, 0, 0 }


struct  _GpSecReqIncomingMsgInd
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t appid;
  uint32_t srcid;
  uint64_t gpdextaddr;
  uint32_t endpoint;
  uint32_t gpdfseclvl;
  uint32_t gpdfkeytype;
  uint32_t gpdsecframecounter;
  uint32_t dgpstubhandle;
};
#define GP_SEC_REQ_INCOMING_MSG_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gp_sec_req_incoming_msg_ind__descriptor) \
    , ZSTACK_CMD_IDS__GP_SEC_REQ_INCOMING_MSG, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GpSecRspMsg
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t status;
  uint32_t dgpstubhandle;
  uint32_t appid;
  uint32_t srcid;
  uint64_t gpdextaddr;
  uint32_t endpoint;
  uint32_t gpdfseclvl;
  uint32_t gpdfkeytype;
  uint32_t gpdsecframecounter;
  ProtobufCBinaryData gpdkey;
};
#define GP_SEC_RSP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gp_sec_rsp_msg__descriptor) \
    , ZSTACK_CMD_IDS__GP_SEC_RSP_MSG, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL} }


struct  _AppCnfAddInstallCodeReq
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint64_t ieeeaddress;
  ProtobufCBinaryData installcode;
  uint32_t crc;
};
#define APP_CNF_ADD_INSTALL_CODE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app_cnf_add_install_code_req__descriptor) \
    , ZSTACK_CMD_IDS__APP_CNF_ADD_INSTALL_CODE_REQ, 0, {0,NULL}, 0 }


struct  _ZstackDefaultRsp
{
  ProtobufCMessage base;
  /*
   * contains the command ID of the request message
   */
  ZStackCmdIDs cmdid;
  /*
   * Response status - default status
   */
  ZStatusValues status;
};
#define ZSTACK_DEFAULT_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zstack_default_rsp__descriptor) \
    , 0, 0 }


struct  _SendGetDevNwkInfoReq
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t nwkdevaddress;
  uint32_t nwkpanid;
  uint32_t sequencenum;
  uint32_t nwklogicalchannel;
};
#define SEND_GET_DEV_NWK_INFO_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_get_dev_nwk_info_req__descriptor) \
    , ZSTACK_CMD_IDS__SEND_GET_DEV_NWK_INFO_REQ, 0, 0, 0, 0 }


struct  _GpDataIndIncomingMsgInd
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t status;
  uint32_t rssi;
  uint32_t linkquality;
  uint32_t seqnumber;
  uint32_t shortaddr;
  uint64_t extaddr;
  uint32_t addrmode;
  uint32_t srcpanid;
  uint32_t appid;
  uint32_t gpdfseclvl;
  uint32_t gpdfkeytype;
  uint32_t autocommissioning;
  uint32_t rxaftertx;
  uint32_t srcid;
  uint32_t endpoint;
  uint32_t gpdsecframecounter;
  uint32_t gpdcmmdid;
  uint32_t mic;
  ProtobufCBinaryData gpdasdu;
};
#define GP_DATA_IND_INCOMING_MSG_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gp_data_ind_incoming_msg_ind__descriptor) \
    , ZSTACK_CMD_IDS__GP_DATA_IND_INCOMING_MSG, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL} }


struct  _UtilSetDevNwkInfoReq
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t nwkdevaddress;
  uint32_t nwkpanid;
  uint32_t sequencenum;
  uint32_t nwklogicalchannel;
};
#define UTIL_SET_DEV_NWK_INFO_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&util_set_dev_nwk_info_req__descriptor) \
    , ZSTACK_CMD_IDS__UTIL_SET_DEV_NWK_INFO_REQ, 0, 0, 0, 0 }


struct  _AppCnfStartCommissioningReq
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t commissioningmode;
};
#define APP_CNF_START_COMMISSIONING_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app_cnf_start_commissioning_req__descriptor) \
    , ZSTACK_CMD_IDS__APP_CNF_START_COMMISSIONING_REQ, 0 }


struct  _ZclActionReq
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t action;
  uint32_t id;
  uint32_t index;
  ProtobufCBinaryData payload;
};
#define ZCL_ACTION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zcl_action_req__descriptor) \
    , ZSTACK_CMD_IDS__ZCL_ACTION_REQ, 0, 0, 0, {0,NULL} }


struct  _ZclActionRsp
{
  ProtobufCMessage base;
  ZStackCmdIDs cmdid;
  uint32_t action;
  uint32_t id;
  uint32_t index;
  ProtobufCBinaryData payload;
};
#define ZCL_ACTION_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zcl_action_rsp__descriptor) \
    , ZSTACK_CMD_IDS__ZCL_ACTION_RSP, 0, 0, 0, {0,NULL} }


/* AFAddr methods */
void   afaddr__init
                     (AFAddr         *message);
size_t afaddr__get_packed_size
                     (const AFAddr   *message);
size_t afaddr__pack
                     (const AFAddr   *message,
                      uint8_t             *out);
size_t afaddr__pack_to_buffer
                     (const AFAddr   *message,
                      ProtobufCBuffer     *buffer);
AFAddr *
       afaddr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   afaddr__free_unpacked
                     (AFAddr *message,
                      ProtobufCAllocator *allocator);
/* StartupOptions methods */
void   startup_options__init
                     (StartupOptions         *message);
size_t startup_options__get_packed_size
                     (const StartupOptions   *message);
size_t startup_options__pack
                     (const StartupOptions   *message,
                      uint8_t             *out);
size_t startup_options__pack_to_buffer
                     (const StartupOptions   *message,
                      ProtobufCBuffer     *buffer);
StartupOptions *
       startup_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   startup_options__free_unpacked
                     (StartupOptions *message,
                      ProtobufCAllocator *allocator);
/* SimpleDescriptor methods */
void   simple_descriptor__init
                     (SimpleDescriptor         *message);
size_t simple_descriptor__get_packed_size
                     (const SimpleDescriptor   *message);
size_t simple_descriptor__pack
                     (const SimpleDescriptor   *message,
                      uint8_t             *out);
size_t simple_descriptor__pack_to_buffer
                     (const SimpleDescriptor   *message,
                      ProtobufCBuffer     *buffer);
SimpleDescriptor *
       simple_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   simple_descriptor__free_unpacked
                     (SimpleDescriptor *message,
                      ProtobufCAllocator *allocator);
/* TransOptions methods */
void   trans_options__init
                     (TransOptions         *message);
size_t trans_options__get_packed_size
                     (const TransOptions   *message);
size_t trans_options__pack
                     (const TransOptions   *message,
                      uint8_t             *out);
size_t trans_options__pack_to_buffer
                     (const TransOptions   *message,
                      ProtobufCBuffer     *buffer);
TransOptions *
       trans_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trans_options__free_unpacked
                     (TransOptions *message,
                      ProtobufCAllocator *allocator);
/* CapabilityInfo methods */
void   capability_info__init
                     (CapabilityInfo         *message);
size_t capability_info__get_packed_size
                     (const CapabilityInfo   *message);
size_t capability_info__pack
                     (const CapabilityInfo   *message,
                      uint8_t             *out);
size_t capability_info__pack_to_buffer
                     (const CapabilityInfo   *message,
                      ProtobufCBuffer     *buffer);
CapabilityInfo *
       capability_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   capability_info__free_unpacked
                     (CapabilityInfo *message,
                      ProtobufCAllocator *allocator);
/* ServerCapabilities methods */
void   server_capabilities__init
                     (ServerCapabilities         *message);
size_t server_capabilities__get_packed_size
                     (const ServerCapabilities   *message);
size_t server_capabilities__pack
                     (const ServerCapabilities   *message,
                      uint8_t             *out);
size_t server_capabilities__pack_to_buffer
                     (const ServerCapabilities   *message,
                      ProtobufCBuffer     *buffer);
ServerCapabilities *
       server_capabilities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_capabilities__free_unpacked
                     (ServerCapabilities *message,
                      ProtobufCAllocator *allocator);
/* BindRec methods */
void   bind_rec__init
                     (BindRec         *message);
size_t bind_rec__get_packed_size
                     (const BindRec   *message);
size_t bind_rec__pack
                     (const BindRec   *message,
                      uint8_t             *out);
size_t bind_rec__pack_to_buffer
                     (const BindRec   *message,
                      ProtobufCBuffer     *buffer);
BindRec *
       bind_rec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bind_rec__free_unpacked
                     (BindRec *message,
                      ProtobufCAllocator *allocator);
/* LeaveOptions methods */
void   leave_options__init
                     (LeaveOptions         *message);
size_t leave_options__get_packed_size
                     (const LeaveOptions   *message);
size_t leave_options__pack
                     (const LeaveOptions   *message,
                      uint8_t             *out);
size_t leave_options__pack_to_buffer
                     (const LeaveOptions   *message,
                      ProtobufCBuffer     *buffer);
LeaveOptions *
       leave_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   leave_options__free_unpacked
                     (LeaveOptions *message,
                      ProtobufCAllocator *allocator);
/* NodeDescriptor methods */
void   node_descriptor__init
                     (NodeDescriptor         *message);
size_t node_descriptor__get_packed_size
                     (const NodeDescriptor   *message);
size_t node_descriptor__pack
                     (const NodeDescriptor   *message,
                      uint8_t             *out);
size_t node_descriptor__pack_to_buffer
                     (const NodeDescriptor   *message,
                      ProtobufCBuffer     *buffer);
NodeDescriptor *
       node_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_descriptor__free_unpacked
                     (NodeDescriptor *message,
                      ProtobufCAllocator *allocator);
/* PowerSource methods */
void   power_source__init
                     (PowerSource         *message);
size_t power_source__get_packed_size
                     (const PowerSource   *message);
size_t power_source__pack
                     (const PowerSource   *message,
                      uint8_t             *out);
size_t power_source__pack_to_buffer
                     (const PowerSource   *message,
                      ProtobufCBuffer     *buffer);
PowerSource *
       power_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   power_source__free_unpacked
                     (PowerSource *message,
                      ProtobufCAllocator *allocator);
/* PowerDescriptor methods */
void   power_descriptor__init
                     (PowerDescriptor         *message);
size_t power_descriptor__get_packed_size
                     (const PowerDescriptor   *message);
size_t power_descriptor__pack
                     (const PowerDescriptor   *message,
                      uint8_t             *out);
size_t power_descriptor__pack_to_buffer
                     (const PowerDescriptor   *message,
                      ProtobufCBuffer     *buffer);
PowerDescriptor *
       power_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   power_descriptor__free_unpacked
                     (PowerDescriptor *message,
                      ProtobufCAllocator *allocator);
/* NwkDiscItem methods */
void   nwk_disc_item__init
                     (NwkDiscItem         *message);
size_t nwk_disc_item__get_packed_size
                     (const NwkDiscItem   *message);
size_t nwk_disc_item__pack
                     (const NwkDiscItem   *message,
                      uint8_t             *out);
size_t nwk_disc_item__pack_to_buffer
                     (const NwkDiscItem   *message,
                      ProtobufCBuffer     *buffer);
NwkDiscItem *
       nwk_disc_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nwk_disc_item__free_unpacked
                     (NwkDiscItem *message,
                      ProtobufCAllocator *allocator);
/* NeighborLqiItem methods */
void   neighbor_lqi_item__init
                     (NeighborLqiItem         *message);
size_t neighbor_lqi_item__get_packed_size
                     (const NeighborLqiItem   *message);
size_t neighbor_lqi_item__pack
                     (const NeighborLqiItem   *message,
                      uint8_t             *out);
size_t neighbor_lqi_item__pack_to_buffer
                     (const NeighborLqiItem   *message,
                      ProtobufCBuffer     *buffer);
NeighborLqiItem *
       neighbor_lqi_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   neighbor_lqi_item__free_unpacked
                     (NeighborLqiItem *message,
                      ProtobufCAllocator *allocator);
/* RtgItem methods */
void   rtg_item__init
                     (RtgItem         *message);
size_t rtg_item__get_packed_size
                     (const RtgItem   *message);
size_t rtg_item__pack
                     (const RtgItem   *message,
                      uint8_t             *out);
size_t rtg_item__pack_to_buffer
                     (const RtgItem   *message,
                      ProtobufCBuffer     *buffer);
RtgItem *
       rtg_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rtg_item__free_unpacked
                     (RtgItem *message,
                      ProtobufCAllocator *allocator);
/* BindItem methods */
void   bind_item__init
                     (BindItem         *message);
size_t bind_item__get_packed_size
                     (const BindItem   *message);
size_t bind_item__pack
                     (const BindItem   *message,
                      uint8_t             *out);
size_t bind_item__pack_to_buffer
                     (const BindItem   *message,
                      ProtobufCBuffer     *buffer);
BindItem *
       bind_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bind_item__free_unpacked
                     (BindItem *message,
                      ProtobufCAllocator *allocator);
/* DeviceTypes methods */
void   device_types__init
                     (DeviceTypes         *message);
size_t device_types__get_packed_size
                     (const DeviceTypes   *message);
size_t device_types__pack
                     (const DeviceTypes   *message,
                      uint8_t             *out);
size_t device_types__pack_to_buffer
                     (const DeviceTypes   *message,
                      ProtobufCBuffer     *buffer);
DeviceTypes *
       device_types__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_types__free_unpacked
                     (DeviceTypes *message,
                      ProtobufCAllocator *allocator);
/* SysResetReq methods */
void   sys_reset_req__init
                     (SysResetReq         *message);
size_t sys_reset_req__get_packed_size
                     (const SysResetReq   *message);
size_t sys_reset_req__pack
                     (const SysResetReq   *message,
                      uint8_t             *out);
size_t sys_reset_req__pack_to_buffer
                     (const SysResetReq   *message,
                      ProtobufCBuffer     *buffer);
SysResetReq *
       sys_reset_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_reset_req__free_unpacked
                     (SysResetReq *message,
                      ProtobufCAllocator *allocator);
/* SysVersionReq methods */
void   sys_version_req__init
                     (SysVersionReq         *message);
size_t sys_version_req__get_packed_size
                     (const SysVersionReq   *message);
size_t sys_version_req__pack
                     (const SysVersionReq   *message,
                      uint8_t             *out);
size_t sys_version_req__pack_to_buffer
                     (const SysVersionReq   *message,
                      ProtobufCBuffer     *buffer);
SysVersionReq *
       sys_version_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_version_req__free_unpacked
                     (SysVersionReq *message,
                      ProtobufCAllocator *allocator);
/* SysConfigReadReq methods */
void   sys_config_read_req__init
                     (SysConfigReadReq         *message);
size_t sys_config_read_req__get_packed_size
                     (const SysConfigReadReq   *message);
size_t sys_config_read_req__pack
                     (const SysConfigReadReq   *message,
                      uint8_t             *out);
size_t sys_config_read_req__pack_to_buffer
                     (const SysConfigReadReq   *message,
                      ProtobufCBuffer     *buffer);
SysConfigReadReq *
       sys_config_read_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_config_read_req__free_unpacked
                     (SysConfigReadReq *message,
                      ProtobufCAllocator *allocator);
/* SysConfigWriteReq methods */
void   sys_config_write_req__init
                     (SysConfigWriteReq         *message);
size_t sys_config_write_req__get_packed_size
                     (const SysConfigWriteReq   *message);
size_t sys_config_write_req__pack
                     (const SysConfigWriteReq   *message,
                      uint8_t             *out);
size_t sys_config_write_req__pack_to_buffer
                     (const SysConfigWriteReq   *message,
                      ProtobufCBuffer     *buffer);
SysConfigWriteReq *
       sys_config_write_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_config_write_req__free_unpacked
                     (SysConfigWriteReq *message,
                      ProtobufCAllocator *allocator);
/* SysSetTxPowerReq methods */
void   sys_set_tx_power_req__init
                     (SysSetTxPowerReq         *message);
size_t sys_set_tx_power_req__get_packed_size
                     (const SysSetTxPowerReq   *message);
size_t sys_set_tx_power_req__pack
                     (const SysSetTxPowerReq   *message,
                      uint8_t             *out);
size_t sys_set_tx_power_req__pack_to_buffer
                     (const SysSetTxPowerReq   *message,
                      ProtobufCBuffer     *buffer);
SysSetTxPowerReq *
       sys_set_tx_power_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_set_tx_power_req__free_unpacked
                     (SysSetTxPowerReq *message,
                      ProtobufCAllocator *allocator);
/* SysNwkInfoReadReq methods */
void   sys_nwk_info_read_req__init
                     (SysNwkInfoReadReq         *message);
size_t sys_nwk_info_read_req__get_packed_size
                     (const SysNwkInfoReadReq   *message);
size_t sys_nwk_info_read_req__pack
                     (const SysNwkInfoReadReq   *message,
                      uint8_t             *out);
size_t sys_nwk_info_read_req__pack_to_buffer
                     (const SysNwkInfoReadReq   *message,
                      ProtobufCBuffer     *buffer);
SysNwkInfoReadReq *
       sys_nwk_info_read_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_nwk_info_read_req__free_unpacked
                     (SysNwkInfoReadReq *message,
                      ProtobufCAllocator *allocator);
/* SysResetInd methods */
void   sys_reset_ind__init
                     (SysResetInd         *message);
size_t sys_reset_ind__get_packed_size
                     (const SysResetInd   *message);
size_t sys_reset_ind__pack
                     (const SysResetInd   *message,
                      uint8_t             *out);
size_t sys_reset_ind__pack_to_buffer
                     (const SysResetInd   *message,
                      ProtobufCBuffer     *buffer);
SysResetInd *
       sys_reset_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_reset_ind__free_unpacked
                     (SysResetInd *message,
                      ProtobufCAllocator *allocator);
/* SysVersionRsp methods */
void   sys_version_rsp__init
                     (SysVersionRsp         *message);
size_t sys_version_rsp__get_packed_size
                     (const SysVersionRsp   *message);
size_t sys_version_rsp__pack
                     (const SysVersionRsp   *message,
                      uint8_t             *out);
size_t sys_version_rsp__pack_to_buffer
                     (const SysVersionRsp   *message,
                      ProtobufCBuffer     *buffer);
SysVersionRsp *
       sys_version_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_version_rsp__free_unpacked
                     (SysVersionRsp *message,
                      ProtobufCAllocator *allocator);
/* SysConfigReadRsp methods */
void   sys_config_read_rsp__init
                     (SysConfigReadRsp         *message);
size_t sys_config_read_rsp__get_packed_size
                     (const SysConfigReadRsp   *message);
size_t sys_config_read_rsp__pack
                     (const SysConfigReadRsp   *message,
                      uint8_t             *out);
size_t sys_config_read_rsp__pack_to_buffer
                     (const SysConfigReadRsp   *message,
                      ProtobufCBuffer     *buffer);
SysConfigReadRsp *
       sys_config_read_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_config_read_rsp__free_unpacked
                     (SysConfigReadRsp *message,
                      ProtobufCAllocator *allocator);
/* SysSetTxPowerRsp methods */
void   sys_set_tx_power_rsp__init
                     (SysSetTxPowerRsp         *message);
size_t sys_set_tx_power_rsp__get_packed_size
                     (const SysSetTxPowerRsp   *message);
size_t sys_set_tx_power_rsp__pack
                     (const SysSetTxPowerRsp   *message,
                      uint8_t             *out);
size_t sys_set_tx_power_rsp__pack_to_buffer
                     (const SysSetTxPowerRsp   *message,
                      ProtobufCBuffer     *buffer);
SysSetTxPowerRsp *
       sys_set_tx_power_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_set_tx_power_rsp__free_unpacked
                     (SysSetTxPowerRsp *message,
                      ProtobufCAllocator *allocator);
/* SysNwkInfoReadRsp methods */
void   sys_nwk_info_read_rsp__init
                     (SysNwkInfoReadRsp         *message);
size_t sys_nwk_info_read_rsp__get_packed_size
                     (const SysNwkInfoReadRsp   *message);
size_t sys_nwk_info_read_rsp__pack
                     (const SysNwkInfoReadRsp   *message,
                      uint8_t             *out);
size_t sys_nwk_info_read_rsp__pack_to_buffer
                     (const SysNwkInfoReadRsp   *message,
                      ProtobufCBuffer     *buffer);
SysNwkInfoReadRsp *
       sys_nwk_info_read_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_nwk_info_read_rsp__free_unpacked
                     (SysNwkInfoReadRsp *message,
                      ProtobufCAllocator *allocator);
/* DevStartReq methods */
void   dev_start_req__init
                     (DevStartReq         *message);
size_t dev_start_req__get_packed_size
                     (const DevStartReq   *message);
size_t dev_start_req__pack
                     (const DevStartReq   *message,
                      uint8_t             *out);
size_t dev_start_req__pack_to_buffer
                     (const DevStartReq   *message,
                      ProtobufCBuffer     *buffer);
DevStartReq *
       dev_start_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_start_req__free_unpacked
                     (DevStartReq *message,
                      ProtobufCAllocator *allocator);
/* DevNwkDiscReq methods */
void   dev_nwk_disc_req__init
                     (DevNwkDiscReq         *message);
size_t dev_nwk_disc_req__get_packed_size
                     (const DevNwkDiscReq   *message);
size_t dev_nwk_disc_req__pack
                     (const DevNwkDiscReq   *message,
                      uint8_t             *out);
size_t dev_nwk_disc_req__pack_to_buffer
                     (const DevNwkDiscReq   *message,
                      ProtobufCBuffer     *buffer);
DevNwkDiscReq *
       dev_nwk_disc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_nwk_disc_req__free_unpacked
                     (DevNwkDiscReq *message,
                      ProtobufCAllocator *allocator);
/* DevJoinReq methods */
void   dev_join_req__init
                     (DevJoinReq         *message);
size_t dev_join_req__get_packed_size
                     (const DevJoinReq   *message);
size_t dev_join_req__pack
                     (const DevJoinReq   *message,
                      uint8_t             *out);
size_t dev_join_req__pack_to_buffer
                     (const DevJoinReq   *message,
                      ProtobufCBuffer     *buffer);
DevJoinReq *
       dev_join_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_join_req__free_unpacked
                     (DevJoinReq *message,
                      ProtobufCAllocator *allocator);
/* DevRejoinReq methods */
void   dev_rejoin_req__init
                     (DevRejoinReq         *message);
size_t dev_rejoin_req__get_packed_size
                     (const DevRejoinReq   *message);
size_t dev_rejoin_req__pack
                     (const DevRejoinReq   *message,
                      uint8_t             *out);
size_t dev_rejoin_req__pack_to_buffer
                     (const DevRejoinReq   *message,
                      ProtobufCBuffer     *buffer);
DevRejoinReq *
       dev_rejoin_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_rejoin_req__free_unpacked
                     (DevRejoinReq *message,
                      ProtobufCAllocator *allocator);
/* DevZDOCBReq methods */
void   dev_zdocbreq__init
                     (DevZDOCBReq         *message);
size_t dev_zdocbreq__get_packed_size
                     (const DevZDOCBReq   *message);
size_t dev_zdocbreq__pack
                     (const DevZDOCBReq   *message,
                      uint8_t             *out);
size_t dev_zdocbreq__pack_to_buffer
                     (const DevZDOCBReq   *message,
                      ProtobufCBuffer     *buffer);
DevZDOCBReq *
       dev_zdocbreq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_zdocbreq__free_unpacked
                     (DevZDOCBReq *message,
                      ProtobufCAllocator *allocator);
/* DevNwkRouteReq methods */
void   dev_nwk_route_req__init
                     (DevNwkRouteReq         *message);
size_t dev_nwk_route_req__get_packed_size
                     (const DevNwkRouteReq   *message);
size_t dev_nwk_route_req__pack
                     (const DevNwkRouteReq   *message,
                      uint8_t             *out);
size_t dev_nwk_route_req__pack_to_buffer
                     (const DevNwkRouteReq   *message,
                      ProtobufCBuffer     *buffer);
DevNwkRouteReq *
       dev_nwk_route_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_nwk_route_req__free_unpacked
                     (DevNwkRouteReq *message,
                      ProtobufCAllocator *allocator);
/* DevNwkCheckRouteReq methods */
void   dev_nwk_check_route_req__init
                     (DevNwkCheckRouteReq         *message);
size_t dev_nwk_check_route_req__get_packed_size
                     (const DevNwkCheckRouteReq   *message);
size_t dev_nwk_check_route_req__pack
                     (const DevNwkCheckRouteReq   *message,
                      uint8_t             *out);
size_t dev_nwk_check_route_req__pack_to_buffer
                     (const DevNwkCheckRouteReq   *message,
                      ProtobufCBuffer     *buffer);
DevNwkCheckRouteReq *
       dev_nwk_check_route_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_nwk_check_route_req__free_unpacked
                     (DevNwkCheckRouteReq *message,
                      ProtobufCAllocator *allocator);
/* DevJammerInd methods */
void   dev_jammer_ind__init
                     (DevJammerInd         *message);
size_t dev_jammer_ind__get_packed_size
                     (const DevJammerInd   *message);
size_t dev_jammer_ind__pack
                     (const DevJammerInd   *message,
                      uint8_t             *out);
size_t dev_jammer_ind__pack_to_buffer
                     (const DevJammerInd   *message,
                      ProtobufCBuffer     *buffer);
DevJammerInd *
       dev_jammer_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_jammer_ind__free_unpacked
                     (DevJammerInd *message,
                      ProtobufCAllocator *allocator);
/* DevPermitJoinInd methods */
void   dev_permit_join_ind__init
                     (DevPermitJoinInd         *message);
size_t dev_permit_join_ind__get_packed_size
                     (const DevPermitJoinInd   *message);
size_t dev_permit_join_ind__pack
                     (const DevPermitJoinInd   *message,
                      uint8_t             *out);
size_t dev_permit_join_ind__pack_to_buffer
                     (const DevPermitJoinInd   *message,
                      ProtobufCBuffer     *buffer);
DevPermitJoinInd *
       dev_permit_join_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_permit_join_ind__free_unpacked
                     (DevPermitJoinInd *message,
                      ProtobufCAllocator *allocator);
/* ApsRemoveGroup methods */
void   aps_remove_group__init
                     (ApsRemoveGroup         *message);
size_t aps_remove_group__get_packed_size
                     (const ApsRemoveGroup   *message);
size_t aps_remove_group__pack
                     (const ApsRemoveGroup   *message,
                      uint8_t             *out);
size_t aps_remove_group__pack_to_buffer
                     (const ApsRemoveGroup   *message,
                      ProtobufCBuffer     *buffer);
ApsRemoveGroup *
       aps_remove_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_remove_group__free_unpacked
                     (ApsRemoveGroup *message,
                      ProtobufCAllocator *allocator);
/* ApsRemoveAllGroups methods */
void   aps_remove_all_groups__init
                     (ApsRemoveAllGroups         *message);
size_t aps_remove_all_groups__get_packed_size
                     (const ApsRemoveAllGroups   *message);
size_t aps_remove_all_groups__pack
                     (const ApsRemoveAllGroups   *message,
                      uint8_t             *out);
size_t aps_remove_all_groups__pack_to_buffer
                     (const ApsRemoveAllGroups   *message,
                      ProtobufCBuffer     *buffer);
ApsRemoveAllGroups *
       aps_remove_all_groups__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_remove_all_groups__free_unpacked
                     (ApsRemoveAllGroups *message,
                      ProtobufCAllocator *allocator);
/* ApsFindAllGroupsReq methods */
void   aps_find_all_groups_req__init
                     (ApsFindAllGroupsReq         *message);
size_t aps_find_all_groups_req__get_packed_size
                     (const ApsFindAllGroupsReq   *message);
size_t aps_find_all_groups_req__pack
                     (const ApsFindAllGroupsReq   *message,
                      uint8_t             *out);
size_t aps_find_all_groups_req__pack_to_buffer
                     (const ApsFindAllGroupsReq   *message,
                      ProtobufCBuffer     *buffer);
ApsFindAllGroupsReq *
       aps_find_all_groups_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_find_all_groups_req__free_unpacked
                     (ApsFindAllGroupsReq *message,
                      ProtobufCAllocator *allocator);
/* ApsFindAllGroupsRsp methods */
void   aps_find_all_groups_rsp__init
                     (ApsFindAllGroupsRsp         *message);
size_t aps_find_all_groups_rsp__get_packed_size
                     (const ApsFindAllGroupsRsp   *message);
size_t aps_find_all_groups_rsp__pack
                     (const ApsFindAllGroupsRsp   *message,
                      uint8_t             *out);
size_t aps_find_all_groups_rsp__pack_to_buffer
                     (const ApsFindAllGroupsRsp   *message,
                      ProtobufCBuffer     *buffer);
ApsFindAllGroupsRsp *
       aps_find_all_groups_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_find_all_groups_rsp__free_unpacked
                     (ApsFindAllGroupsRsp *message,
                      ProtobufCAllocator *allocator);
/* ApsFindGroupReq methods */
void   aps_find_group_req__init
                     (ApsFindGroupReq         *message);
size_t aps_find_group_req__get_packed_size
                     (const ApsFindGroupReq   *message);
size_t aps_find_group_req__pack
                     (const ApsFindGroupReq   *message,
                      uint8_t             *out);
size_t aps_find_group_req__pack_to_buffer
                     (const ApsFindGroupReq   *message,
                      ProtobufCBuffer     *buffer);
ApsFindGroupReq *
       aps_find_group_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_find_group_req__free_unpacked
                     (ApsFindGroupReq *message,
                      ProtobufCAllocator *allocator);
/* ApsFindGroupRsp methods */
void   aps_find_group_rsp__init
                     (ApsFindGroupRsp         *message);
size_t aps_find_group_rsp__get_packed_size
                     (const ApsFindGroupRsp   *message);
size_t aps_find_group_rsp__pack
                     (const ApsFindGroupRsp   *message,
                      uint8_t             *out);
size_t aps_find_group_rsp__pack_to_buffer
                     (const ApsFindGroupRsp   *message,
                      ProtobufCBuffer     *buffer);
ApsFindGroupRsp *
       aps_find_group_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_find_group_rsp__free_unpacked
                     (ApsFindGroupRsp *message,
                      ProtobufCAllocator *allocator);
/* ApsAddGroup methods */
void   aps_add_group__init
                     (ApsAddGroup         *message);
size_t aps_add_group__get_packed_size
                     (const ApsAddGroup   *message);
size_t aps_add_group__pack
                     (const ApsAddGroup   *message,
                      uint8_t             *out);
size_t aps_add_group__pack_to_buffer
                     (const ApsAddGroup   *message,
                      ProtobufCBuffer     *buffer);
ApsAddGroup *
       aps_add_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_add_group__free_unpacked
                     (ApsAddGroup *message,
                      ProtobufCAllocator *allocator);
/* ApsCountAllGroups methods */
void   aps_count_all_groups__init
                     (ApsCountAllGroups         *message);
size_t aps_count_all_groups__get_packed_size
                     (const ApsCountAllGroups   *message);
size_t aps_count_all_groups__pack
                     (const ApsCountAllGroups   *message,
                      uint8_t             *out);
size_t aps_count_all_groups__pack_to_buffer
                     (const ApsCountAllGroups   *message,
                      ProtobufCBuffer     *buffer);
ApsCountAllGroups *
       aps_count_all_groups__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   aps_count_all_groups__free_unpacked
                     (ApsCountAllGroups *message,
                      ProtobufCAllocator *allocator);
/* AfRegisterReq methods */
void   af_register_req__init
                     (AfRegisterReq         *message);
size_t af_register_req__get_packed_size
                     (const AfRegisterReq   *message);
size_t af_register_req__pack
                     (const AfRegisterReq   *message,
                      uint8_t             *out);
size_t af_register_req__pack_to_buffer
                     (const AfRegisterReq   *message,
                      ProtobufCBuffer     *buffer);
AfRegisterReq *
       af_register_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_register_req__free_unpacked
                     (AfRegisterReq *message,
                      ProtobufCAllocator *allocator);
/* AfUnRegisterReq methods */
void   af_un_register_req__init
                     (AfUnRegisterReq         *message);
size_t af_un_register_req__get_packed_size
                     (const AfUnRegisterReq   *message);
size_t af_un_register_req__pack
                     (const AfUnRegisterReq   *message,
                      uint8_t             *out);
size_t af_un_register_req__pack_to_buffer
                     (const AfUnRegisterReq   *message,
                      ProtobufCBuffer     *buffer);
AfUnRegisterReq *
       af_un_register_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_un_register_req__free_unpacked
                     (AfUnRegisterReq *message,
                      ProtobufCAllocator *allocator);
/* AfDataReq methods */
void   af_data_req__init
                     (AfDataReq         *message);
size_t af_data_req__get_packed_size
                     (const AfDataReq   *message);
size_t af_data_req__pack
                     (const AfDataReq   *message,
                      uint8_t             *out);
size_t af_data_req__pack_to_buffer
                     (const AfDataReq   *message,
                      ProtobufCBuffer     *buffer);
AfDataReq *
       af_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_data_req__free_unpacked
                     (AfDataReq *message,
                      ProtobufCAllocator *allocator);
/* AfInterPanCtlReq methods */
void   af_inter_pan_ctl_req__init
                     (AfInterPanCtlReq         *message);
size_t af_inter_pan_ctl_req__get_packed_size
                     (const AfInterPanCtlReq   *message);
size_t af_inter_pan_ctl_req__pack
                     (const AfInterPanCtlReq   *message,
                      uint8_t             *out);
size_t af_inter_pan_ctl_req__pack_to_buffer
                     (const AfInterPanCtlReq   *message,
                      ProtobufCBuffer     *buffer);
AfInterPanCtlReq *
       af_inter_pan_ctl_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_inter_pan_ctl_req__free_unpacked
                     (AfInterPanCtlReq *message,
                      ProtobufCAllocator *allocator);
/* AfConfigGetReq methods */
void   af_config_get_req__init
                     (AfConfigGetReq         *message);
size_t af_config_get_req__get_packed_size
                     (const AfConfigGetReq   *message);
size_t af_config_get_req__pack
                     (const AfConfigGetReq   *message,
                      uint8_t             *out);
size_t af_config_get_req__pack_to_buffer
                     (const AfConfigGetReq   *message,
                      ProtobufCBuffer     *buffer);
AfConfigGetReq *
       af_config_get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_config_get_req__free_unpacked
                     (AfConfigGetReq *message,
                      ProtobufCAllocator *allocator);
/* AfConfigSetReq methods */
void   af_config_set_req__init
                     (AfConfigSetReq         *message);
size_t af_config_set_req__get_packed_size
                     (const AfConfigSetReq   *message);
size_t af_config_set_req__pack
                     (const AfConfigSetReq   *message,
                      uint8_t             *out);
size_t af_config_set_req__pack_to_buffer
                     (const AfConfigSetReq   *message,
                      ProtobufCBuffer     *buffer);
AfConfigSetReq *
       af_config_set_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_config_set_req__free_unpacked
                     (AfConfigSetReq *message,
                      ProtobufCAllocator *allocator);
/* AfConfigGetRsp methods */
void   af_config_get_rsp__init
                     (AfConfigGetRsp         *message);
size_t af_config_get_rsp__get_packed_size
                     (const AfConfigGetRsp   *message);
size_t af_config_get_rsp__pack
                     (const AfConfigGetRsp   *message,
                      uint8_t             *out);
size_t af_config_get_rsp__pack_to_buffer
                     (const AfConfigGetRsp   *message,
                      ProtobufCBuffer     *buffer);
AfConfigGetRsp *
       af_config_get_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_config_get_rsp__free_unpacked
                     (AfConfigGetRsp *message,
                      ProtobufCAllocator *allocator);
/* AfDataConfirmInd methods */
void   af_data_confirm_ind__init
                     (AfDataConfirmInd         *message);
size_t af_data_confirm_ind__get_packed_size
                     (const AfDataConfirmInd   *message);
size_t af_data_confirm_ind__pack
                     (const AfDataConfirmInd   *message,
                      uint8_t             *out);
size_t af_data_confirm_ind__pack_to_buffer
                     (const AfDataConfirmInd   *message,
                      ProtobufCBuffer     *buffer);
AfDataConfirmInd *
       af_data_confirm_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_data_confirm_ind__free_unpacked
                     (AfDataConfirmInd *message,
                      ProtobufCAllocator *allocator);
/* AfIncomingMsgInd methods */
void   af_incoming_msg_ind__init
                     (AfIncomingMsgInd         *message);
size_t af_incoming_msg_ind__get_packed_size
                     (const AfIncomingMsgInd   *message);
size_t af_incoming_msg_ind__pack
                     (const AfIncomingMsgInd   *message,
                      uint8_t             *out);
size_t af_incoming_msg_ind__pack_to_buffer
                     (const AfIncomingMsgInd   *message,
                      ProtobufCBuffer     *buffer);
AfIncomingMsgInd *
       af_incoming_msg_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_incoming_msg_ind__free_unpacked
                     (AfIncomingMsgInd *message,
                      ProtobufCAllocator *allocator);
/* AfReflectErrorInd methods */
void   af_reflect_error_ind__init
                     (AfReflectErrorInd         *message);
size_t af_reflect_error_ind__get_packed_size
                     (const AfReflectErrorInd   *message);
size_t af_reflect_error_ind__pack
                     (const AfReflectErrorInd   *message,
                      uint8_t             *out);
size_t af_reflect_error_ind__pack_to_buffer
                     (const AfReflectErrorInd   *message,
                      ProtobufCBuffer     *buffer);
AfReflectErrorInd *
       af_reflect_error_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   af_reflect_error_ind__free_unpacked
                     (AfReflectErrorInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoNwkAddrReq methods */
void   zdo_nwk_addr_req__init
                     (ZdoNwkAddrReq         *message);
size_t zdo_nwk_addr_req__get_packed_size
                     (const ZdoNwkAddrReq   *message);
size_t zdo_nwk_addr_req__pack
                     (const ZdoNwkAddrReq   *message,
                      uint8_t             *out);
size_t zdo_nwk_addr_req__pack_to_buffer
                     (const ZdoNwkAddrReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoNwkAddrReq *
       zdo_nwk_addr_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_nwk_addr_req__free_unpacked
                     (ZdoNwkAddrReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoIeeeAddrReq methods */
void   zdo_ieee_addr_req__init
                     (ZdoIeeeAddrReq         *message);
size_t zdo_ieee_addr_req__get_packed_size
                     (const ZdoIeeeAddrReq   *message);
size_t zdo_ieee_addr_req__pack
                     (const ZdoIeeeAddrReq   *message,
                      uint8_t             *out);
size_t zdo_ieee_addr_req__pack_to_buffer
                     (const ZdoIeeeAddrReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoIeeeAddrReq *
       zdo_ieee_addr_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_ieee_addr_req__free_unpacked
                     (ZdoIeeeAddrReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoNodeDescReq methods */
void   zdo_node_desc_req__init
                     (ZdoNodeDescReq         *message);
size_t zdo_node_desc_req__get_packed_size
                     (const ZdoNodeDescReq   *message);
size_t zdo_node_desc_req__pack
                     (const ZdoNodeDescReq   *message,
                      uint8_t             *out);
size_t zdo_node_desc_req__pack_to_buffer
                     (const ZdoNodeDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoNodeDescReq *
       zdo_node_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_node_desc_req__free_unpacked
                     (ZdoNodeDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoPowerDescReq methods */
void   zdo_power_desc_req__init
                     (ZdoPowerDescReq         *message);
size_t zdo_power_desc_req__get_packed_size
                     (const ZdoPowerDescReq   *message);
size_t zdo_power_desc_req__pack
                     (const ZdoPowerDescReq   *message,
                      uint8_t             *out);
size_t zdo_power_desc_req__pack_to_buffer
                     (const ZdoPowerDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoPowerDescReq *
       zdo_power_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_power_desc_req__free_unpacked
                     (ZdoPowerDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoSimpleDescReq methods */
void   zdo_simple_desc_req__init
                     (ZdoSimpleDescReq         *message);
size_t zdo_simple_desc_req__get_packed_size
                     (const ZdoSimpleDescReq   *message);
size_t zdo_simple_desc_req__pack
                     (const ZdoSimpleDescReq   *message,
                      uint8_t             *out);
size_t zdo_simple_desc_req__pack_to_buffer
                     (const ZdoSimpleDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoSimpleDescReq *
       zdo_simple_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_simple_desc_req__free_unpacked
                     (ZdoSimpleDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoActiveEndpointReq methods */
void   zdo_active_endpoint_req__init
                     (ZdoActiveEndpointReq         *message);
size_t zdo_active_endpoint_req__get_packed_size
                     (const ZdoActiveEndpointReq   *message);
size_t zdo_active_endpoint_req__pack
                     (const ZdoActiveEndpointReq   *message,
                      uint8_t             *out);
size_t zdo_active_endpoint_req__pack_to_buffer
                     (const ZdoActiveEndpointReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoActiveEndpointReq *
       zdo_active_endpoint_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_active_endpoint_req__free_unpacked
                     (ZdoActiveEndpointReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMatchDescReq methods */
void   zdo_match_desc_req__init
                     (ZdoMatchDescReq         *message);
size_t zdo_match_desc_req__get_packed_size
                     (const ZdoMatchDescReq   *message);
size_t zdo_match_desc_req__pack
                     (const ZdoMatchDescReq   *message,
                      uint8_t             *out);
size_t zdo_match_desc_req__pack_to_buffer
                     (const ZdoMatchDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMatchDescReq *
       zdo_match_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_match_desc_req__free_unpacked
                     (ZdoMatchDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoComplexDescReq methods */
void   zdo_complex_desc_req__init
                     (ZdoComplexDescReq         *message);
size_t zdo_complex_desc_req__get_packed_size
                     (const ZdoComplexDescReq   *message);
size_t zdo_complex_desc_req__pack
                     (const ZdoComplexDescReq   *message,
                      uint8_t             *out);
size_t zdo_complex_desc_req__pack_to_buffer
                     (const ZdoComplexDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoComplexDescReq *
       zdo_complex_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_complex_desc_req__free_unpacked
                     (ZdoComplexDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoUserDescReq methods */
void   zdo_user_desc_req__init
                     (ZdoUserDescReq         *message);
size_t zdo_user_desc_req__get_packed_size
                     (const ZdoUserDescReq   *message);
size_t zdo_user_desc_req__pack
                     (const ZdoUserDescReq   *message,
                      uint8_t             *out);
size_t zdo_user_desc_req__pack_to_buffer
                     (const ZdoUserDescReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoUserDescReq *
       zdo_user_desc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_user_desc_req__free_unpacked
                     (ZdoUserDescReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoDeviceAnnounceReq methods */
void   zdo_device_announce_req__init
                     (ZdoDeviceAnnounceReq         *message);
size_t zdo_device_announce_req__get_packed_size
                     (const ZdoDeviceAnnounceReq   *message);
size_t zdo_device_announce_req__pack
                     (const ZdoDeviceAnnounceReq   *message,
                      uint8_t             *out);
size_t zdo_device_announce_req__pack_to_buffer
                     (const ZdoDeviceAnnounceReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoDeviceAnnounceReq *
       zdo_device_announce_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_device_announce_req__free_unpacked
                     (ZdoDeviceAnnounceReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoUserDescSetReq methods */
void   zdo_user_desc_set_req__init
                     (ZdoUserDescSetReq         *message);
size_t zdo_user_desc_set_req__get_packed_size
                     (const ZdoUserDescSetReq   *message);
size_t zdo_user_desc_set_req__pack
                     (const ZdoUserDescSetReq   *message,
                      uint8_t             *out);
size_t zdo_user_desc_set_req__pack_to_buffer
                     (const ZdoUserDescSetReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoUserDescSetReq *
       zdo_user_desc_set_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_user_desc_set_req__free_unpacked
                     (ZdoUserDescSetReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoServerDiscReq methods */
void   zdo_server_disc_req__init
                     (ZdoServerDiscReq         *message);
size_t zdo_server_disc_req__get_packed_size
                     (const ZdoServerDiscReq   *message);
size_t zdo_server_disc_req__pack
                     (const ZdoServerDiscReq   *message,
                      uint8_t             *out);
size_t zdo_server_disc_req__pack_to_buffer
                     (const ZdoServerDiscReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoServerDiscReq *
       zdo_server_disc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_server_disc_req__free_unpacked
                     (ZdoServerDiscReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoEndDeviceBindReq methods */
void   zdo_end_device_bind_req__init
                     (ZdoEndDeviceBindReq         *message);
size_t zdo_end_device_bind_req__get_packed_size
                     (const ZdoEndDeviceBindReq   *message);
size_t zdo_end_device_bind_req__pack
                     (const ZdoEndDeviceBindReq   *message,
                      uint8_t             *out);
size_t zdo_end_device_bind_req__pack_to_buffer
                     (const ZdoEndDeviceBindReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoEndDeviceBindReq *
       zdo_end_device_bind_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_end_device_bind_req__free_unpacked
                     (ZdoEndDeviceBindReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoBindReq methods */
void   zdo_bind_req__init
                     (ZdoBindReq         *message);
size_t zdo_bind_req__get_packed_size
                     (const ZdoBindReq   *message);
size_t zdo_bind_req__pack
                     (const ZdoBindReq   *message,
                      uint8_t             *out);
size_t zdo_bind_req__pack_to_buffer
                     (const ZdoBindReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoBindReq *
       zdo_bind_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_bind_req__free_unpacked
                     (ZdoBindReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoUnbindReq methods */
void   zdo_unbind_req__init
                     (ZdoUnbindReq         *message);
size_t zdo_unbind_req__get_packed_size
                     (const ZdoUnbindReq   *message);
size_t zdo_unbind_req__pack
                     (const ZdoUnbindReq   *message,
                      uint8_t             *out);
size_t zdo_unbind_req__pack_to_buffer
                     (const ZdoUnbindReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoUnbindReq *
       zdo_unbind_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_unbind_req__free_unpacked
                     (ZdoUnbindReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtNwkDiscReq methods */
void   zdo_mgmt_nwk_disc_req__init
                     (ZdoMgmtNwkDiscReq         *message);
size_t zdo_mgmt_nwk_disc_req__get_packed_size
                     (const ZdoMgmtNwkDiscReq   *message);
size_t zdo_mgmt_nwk_disc_req__pack
                     (const ZdoMgmtNwkDiscReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_nwk_disc_req__pack_to_buffer
                     (const ZdoMgmtNwkDiscReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtNwkDiscReq *
       zdo_mgmt_nwk_disc_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_nwk_disc_req__free_unpacked
                     (ZdoMgmtNwkDiscReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtLqiReq methods */
void   zdo_mgmt_lqi_req__init
                     (ZdoMgmtLqiReq         *message);
size_t zdo_mgmt_lqi_req__get_packed_size
                     (const ZdoMgmtLqiReq   *message);
size_t zdo_mgmt_lqi_req__pack
                     (const ZdoMgmtLqiReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_lqi_req__pack_to_buffer
                     (const ZdoMgmtLqiReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtLqiReq *
       zdo_mgmt_lqi_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_lqi_req__free_unpacked
                     (ZdoMgmtLqiReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtRtgReq methods */
void   zdo_mgmt_rtg_req__init
                     (ZdoMgmtRtgReq         *message);
size_t zdo_mgmt_rtg_req__get_packed_size
                     (const ZdoMgmtRtgReq   *message);
size_t zdo_mgmt_rtg_req__pack
                     (const ZdoMgmtRtgReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_rtg_req__pack_to_buffer
                     (const ZdoMgmtRtgReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtRtgReq *
       zdo_mgmt_rtg_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_rtg_req__free_unpacked
                     (ZdoMgmtRtgReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtBindReq methods */
void   zdo_mgmt_bind_req__init
                     (ZdoMgmtBindReq         *message);
size_t zdo_mgmt_bind_req__get_packed_size
                     (const ZdoMgmtBindReq   *message);
size_t zdo_mgmt_bind_req__pack
                     (const ZdoMgmtBindReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_bind_req__pack_to_buffer
                     (const ZdoMgmtBindReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtBindReq *
       zdo_mgmt_bind_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_bind_req__free_unpacked
                     (ZdoMgmtBindReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtLeaveReq methods */
void   zdo_mgmt_leave_req__init
                     (ZdoMgmtLeaveReq         *message);
size_t zdo_mgmt_leave_req__get_packed_size
                     (const ZdoMgmtLeaveReq   *message);
size_t zdo_mgmt_leave_req__pack
                     (const ZdoMgmtLeaveReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_leave_req__pack_to_buffer
                     (const ZdoMgmtLeaveReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtLeaveReq *
       zdo_mgmt_leave_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_leave_req__free_unpacked
                     (ZdoMgmtLeaveReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtDirectJoinReq methods */
void   zdo_mgmt_direct_join_req__init
                     (ZdoMgmtDirectJoinReq         *message);
size_t zdo_mgmt_direct_join_req__get_packed_size
                     (const ZdoMgmtDirectJoinReq   *message);
size_t zdo_mgmt_direct_join_req__pack
                     (const ZdoMgmtDirectJoinReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_direct_join_req__pack_to_buffer
                     (const ZdoMgmtDirectJoinReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtDirectJoinReq *
       zdo_mgmt_direct_join_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_direct_join_req__free_unpacked
                     (ZdoMgmtDirectJoinReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtPermitJoinReq methods */
void   zdo_mgmt_permit_join_req__init
                     (ZdoMgmtPermitJoinReq         *message);
size_t zdo_mgmt_permit_join_req__get_packed_size
                     (const ZdoMgmtPermitJoinReq   *message);
size_t zdo_mgmt_permit_join_req__pack
                     (const ZdoMgmtPermitJoinReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_permit_join_req__pack_to_buffer
                     (const ZdoMgmtPermitJoinReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtPermitJoinReq *
       zdo_mgmt_permit_join_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_permit_join_req__free_unpacked
                     (ZdoMgmtPermitJoinReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtNwkUpdateReq methods */
void   zdo_mgmt_nwk_update_req__init
                     (ZdoMgmtNwkUpdateReq         *message);
size_t zdo_mgmt_nwk_update_req__get_packed_size
                     (const ZdoMgmtNwkUpdateReq   *message);
size_t zdo_mgmt_nwk_update_req__pack
                     (const ZdoMgmtNwkUpdateReq   *message,
                      uint8_t             *out);
size_t zdo_mgmt_nwk_update_req__pack_to_buffer
                     (const ZdoMgmtNwkUpdateReq   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtNwkUpdateReq *
       zdo_mgmt_nwk_update_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_nwk_update_req__free_unpacked
                     (ZdoMgmtNwkUpdateReq *message,
                      ProtobufCAllocator *allocator);
/* ZdoNwkAddrRspInd methods */
void   zdo_nwk_addr_rsp_ind__init
                     (ZdoNwkAddrRspInd         *message);
size_t zdo_nwk_addr_rsp_ind__get_packed_size
                     (const ZdoNwkAddrRspInd   *message);
size_t zdo_nwk_addr_rsp_ind__pack
                     (const ZdoNwkAddrRspInd   *message,
                      uint8_t             *out);
size_t zdo_nwk_addr_rsp_ind__pack_to_buffer
                     (const ZdoNwkAddrRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoNwkAddrRspInd *
       zdo_nwk_addr_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_nwk_addr_rsp_ind__free_unpacked
                     (ZdoNwkAddrRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoIeeeAddrRspInd methods */
void   zdo_ieee_addr_rsp_ind__init
                     (ZdoIeeeAddrRspInd         *message);
size_t zdo_ieee_addr_rsp_ind__get_packed_size
                     (const ZdoIeeeAddrRspInd   *message);
size_t zdo_ieee_addr_rsp_ind__pack
                     (const ZdoIeeeAddrRspInd   *message,
                      uint8_t             *out);
size_t zdo_ieee_addr_rsp_ind__pack_to_buffer
                     (const ZdoIeeeAddrRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoIeeeAddrRspInd *
       zdo_ieee_addr_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_ieee_addr_rsp_ind__free_unpacked
                     (ZdoIeeeAddrRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoNodeDescRspInd methods */
void   zdo_node_desc_rsp_ind__init
                     (ZdoNodeDescRspInd         *message);
size_t zdo_node_desc_rsp_ind__get_packed_size
                     (const ZdoNodeDescRspInd   *message);
size_t zdo_node_desc_rsp_ind__pack
                     (const ZdoNodeDescRspInd   *message,
                      uint8_t             *out);
size_t zdo_node_desc_rsp_ind__pack_to_buffer
                     (const ZdoNodeDescRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoNodeDescRspInd *
       zdo_node_desc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_node_desc_rsp_ind__free_unpacked
                     (ZdoNodeDescRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoPowerDescRspInd methods */
void   zdo_power_desc_rsp_ind__init
                     (ZdoPowerDescRspInd         *message);
size_t zdo_power_desc_rsp_ind__get_packed_size
                     (const ZdoPowerDescRspInd   *message);
size_t zdo_power_desc_rsp_ind__pack
                     (const ZdoPowerDescRspInd   *message,
                      uint8_t             *out);
size_t zdo_power_desc_rsp_ind__pack_to_buffer
                     (const ZdoPowerDescRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoPowerDescRspInd *
       zdo_power_desc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_power_desc_rsp_ind__free_unpacked
                     (ZdoPowerDescRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoSimpleDescRspInd methods */
void   zdo_simple_desc_rsp_ind__init
                     (ZdoSimpleDescRspInd         *message);
size_t zdo_simple_desc_rsp_ind__get_packed_size
                     (const ZdoSimpleDescRspInd   *message);
size_t zdo_simple_desc_rsp_ind__pack
                     (const ZdoSimpleDescRspInd   *message,
                      uint8_t             *out);
size_t zdo_simple_desc_rsp_ind__pack_to_buffer
                     (const ZdoSimpleDescRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoSimpleDescRspInd *
       zdo_simple_desc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_simple_desc_rsp_ind__free_unpacked
                     (ZdoSimpleDescRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoActiveEndpointsRspInd methods */
void   zdo_active_endpoints_rsp_ind__init
                     (ZdoActiveEndpointsRspInd         *message);
size_t zdo_active_endpoints_rsp_ind__get_packed_size
                     (const ZdoActiveEndpointsRspInd   *message);
size_t zdo_active_endpoints_rsp_ind__pack
                     (const ZdoActiveEndpointsRspInd   *message,
                      uint8_t             *out);
size_t zdo_active_endpoints_rsp_ind__pack_to_buffer
                     (const ZdoActiveEndpointsRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoActiveEndpointsRspInd *
       zdo_active_endpoints_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_active_endpoints_rsp_ind__free_unpacked
                     (ZdoActiveEndpointsRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMatchDescRspInd methods */
void   zdo_match_desc_rsp_ind__init
                     (ZdoMatchDescRspInd         *message);
size_t zdo_match_desc_rsp_ind__get_packed_size
                     (const ZdoMatchDescRspInd   *message);
size_t zdo_match_desc_rsp_ind__pack
                     (const ZdoMatchDescRspInd   *message,
                      uint8_t             *out);
size_t zdo_match_desc_rsp_ind__pack_to_buffer
                     (const ZdoMatchDescRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMatchDescRspInd *
       zdo_match_desc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_match_desc_rsp_ind__free_unpacked
                     (ZdoMatchDescRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoUserDescRspInd methods */
void   zdo_user_desc_rsp_ind__init
                     (ZdoUserDescRspInd         *message);
size_t zdo_user_desc_rsp_ind__get_packed_size
                     (const ZdoUserDescRspInd   *message);
size_t zdo_user_desc_rsp_ind__pack
                     (const ZdoUserDescRspInd   *message,
                      uint8_t             *out);
size_t zdo_user_desc_rsp_ind__pack_to_buffer
                     (const ZdoUserDescRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoUserDescRspInd *
       zdo_user_desc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_user_desc_rsp_ind__free_unpacked
                     (ZdoUserDescRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoServerDiscoveryRspInd methods */
void   zdo_server_discovery_rsp_ind__init
                     (ZdoServerDiscoveryRspInd         *message);
size_t zdo_server_discovery_rsp_ind__get_packed_size
                     (const ZdoServerDiscoveryRspInd   *message);
size_t zdo_server_discovery_rsp_ind__pack
                     (const ZdoServerDiscoveryRspInd   *message,
                      uint8_t             *out);
size_t zdo_server_discovery_rsp_ind__pack_to_buffer
                     (const ZdoServerDiscoveryRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoServerDiscoveryRspInd *
       zdo_server_discovery_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_server_discovery_rsp_ind__free_unpacked
                     (ZdoServerDiscoveryRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoEndDeviceTimeoutRspInd methods */
void   zdo_end_device_timeout_rsp_ind__init
                     (ZdoEndDeviceTimeoutRspInd         *message);
size_t zdo_end_device_timeout_rsp_ind__get_packed_size
                     (const ZdoEndDeviceTimeoutRspInd   *message);
size_t zdo_end_device_timeout_rsp_ind__pack
                     (const ZdoEndDeviceTimeoutRspInd   *message,
                      uint8_t             *out);
size_t zdo_end_device_timeout_rsp_ind__pack_to_buffer
                     (const ZdoEndDeviceTimeoutRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoEndDeviceTimeoutRspInd *
       zdo_end_device_timeout_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_end_device_timeout_rsp_ind__free_unpacked
                     (ZdoEndDeviceTimeoutRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoBindRspInd methods */
void   zdo_bind_rsp_ind__init
                     (ZdoBindRspInd         *message);
size_t zdo_bind_rsp_ind__get_packed_size
                     (const ZdoBindRspInd   *message);
size_t zdo_bind_rsp_ind__pack
                     (const ZdoBindRspInd   *message,
                      uint8_t             *out);
size_t zdo_bind_rsp_ind__pack_to_buffer
                     (const ZdoBindRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoBindRspInd *
       zdo_bind_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_bind_rsp_ind__free_unpacked
                     (ZdoBindRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoEndDeviceBindRspInd methods */
void   zdo_end_device_bind_rsp_ind__init
                     (ZdoEndDeviceBindRspInd         *message);
size_t zdo_end_device_bind_rsp_ind__get_packed_size
                     (const ZdoEndDeviceBindRspInd   *message);
size_t zdo_end_device_bind_rsp_ind__pack
                     (const ZdoEndDeviceBindRspInd   *message,
                      uint8_t             *out);
size_t zdo_end_device_bind_rsp_ind__pack_to_buffer
                     (const ZdoEndDeviceBindRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoEndDeviceBindRspInd *
       zdo_end_device_bind_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_end_device_bind_rsp_ind__free_unpacked
                     (ZdoEndDeviceBindRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoUnbindRspInd methods */
void   zdo_unbind_rsp_ind__init
                     (ZdoUnbindRspInd         *message);
size_t zdo_unbind_rsp_ind__get_packed_size
                     (const ZdoUnbindRspInd   *message);
size_t zdo_unbind_rsp_ind__pack
                     (const ZdoUnbindRspInd   *message,
                      uint8_t             *out);
size_t zdo_unbind_rsp_ind__pack_to_buffer
                     (const ZdoUnbindRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoUnbindRspInd *
       zdo_unbind_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_unbind_rsp_ind__free_unpacked
                     (ZdoUnbindRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoDeviceAnnounceInd methods */
void   zdo_device_announce_ind__init
                     (ZdoDeviceAnnounceInd         *message);
size_t zdo_device_announce_ind__get_packed_size
                     (const ZdoDeviceAnnounceInd   *message);
size_t zdo_device_announce_ind__pack
                     (const ZdoDeviceAnnounceInd   *message,
                      uint8_t             *out);
size_t zdo_device_announce_ind__pack_to_buffer
                     (const ZdoDeviceAnnounceInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoDeviceAnnounceInd *
       zdo_device_announce_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_device_announce_ind__free_unpacked
                     (ZdoDeviceAnnounceInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoDeviceAnnounceShadowInd methods */
void   zdo_device_announce_shadow_ind__init
                     (ZdoDeviceAnnounceShadowInd         *message);
size_t zdo_device_announce_shadow_ind__get_packed_size
                     (const ZdoDeviceAnnounceShadowInd   *message);
size_t zdo_device_announce_shadow_ind__pack
                     (const ZdoDeviceAnnounceShadowInd   *message,
                      uint8_t             *out);
size_t zdo_device_announce_shadow_ind__pack_to_buffer
                     (const ZdoDeviceAnnounceShadowInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoDeviceAnnounceShadowInd *
       zdo_device_announce_shadow_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_device_announce_shadow_ind__free_unpacked
                     (ZdoDeviceAnnounceShadowInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtNwkDiscRspInd methods */
void   zdo_mgmt_nwk_disc_rsp_ind__init
                     (ZdoMgmtNwkDiscRspInd         *message);
size_t zdo_mgmt_nwk_disc_rsp_ind__get_packed_size
                     (const ZdoMgmtNwkDiscRspInd   *message);
size_t zdo_mgmt_nwk_disc_rsp_ind__pack
                     (const ZdoMgmtNwkDiscRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_nwk_disc_rsp_ind__pack_to_buffer
                     (const ZdoMgmtNwkDiscRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtNwkDiscRspInd *
       zdo_mgmt_nwk_disc_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_nwk_disc_rsp_ind__free_unpacked
                     (ZdoMgmtNwkDiscRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtLqiRspInd methods */
void   zdo_mgmt_lqi_rsp_ind__init
                     (ZdoMgmtLqiRspInd         *message);
size_t zdo_mgmt_lqi_rsp_ind__get_packed_size
                     (const ZdoMgmtLqiRspInd   *message);
size_t zdo_mgmt_lqi_rsp_ind__pack
                     (const ZdoMgmtLqiRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_lqi_rsp_ind__pack_to_buffer
                     (const ZdoMgmtLqiRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtLqiRspInd *
       zdo_mgmt_lqi_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_lqi_rsp_ind__free_unpacked
                     (ZdoMgmtLqiRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtRtgRspInd methods */
void   zdo_mgmt_rtg_rsp_ind__init
                     (ZdoMgmtRtgRspInd         *message);
size_t zdo_mgmt_rtg_rsp_ind__get_packed_size
                     (const ZdoMgmtRtgRspInd   *message);
size_t zdo_mgmt_rtg_rsp_ind__pack
                     (const ZdoMgmtRtgRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_rtg_rsp_ind__pack_to_buffer
                     (const ZdoMgmtRtgRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtRtgRspInd *
       zdo_mgmt_rtg_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_rtg_rsp_ind__free_unpacked
                     (ZdoMgmtRtgRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtBindRspInd methods */
void   zdo_mgmt_bind_rsp_ind__init
                     (ZdoMgmtBindRspInd         *message);
size_t zdo_mgmt_bind_rsp_ind__get_packed_size
                     (const ZdoMgmtBindRspInd   *message);
size_t zdo_mgmt_bind_rsp_ind__pack
                     (const ZdoMgmtBindRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_bind_rsp_ind__pack_to_buffer
                     (const ZdoMgmtBindRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtBindRspInd *
       zdo_mgmt_bind_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_bind_rsp_ind__free_unpacked
                     (ZdoMgmtBindRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtLeaveRspInd methods */
void   zdo_mgmt_leave_rsp_ind__init
                     (ZdoMgmtLeaveRspInd         *message);
size_t zdo_mgmt_leave_rsp_ind__get_packed_size
                     (const ZdoMgmtLeaveRspInd   *message);
size_t zdo_mgmt_leave_rsp_ind__pack
                     (const ZdoMgmtLeaveRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_leave_rsp_ind__pack_to_buffer
                     (const ZdoMgmtLeaveRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtLeaveRspInd *
       zdo_mgmt_leave_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_leave_rsp_ind__free_unpacked
                     (ZdoMgmtLeaveRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtDirectJoinRspInd methods */
void   zdo_mgmt_direct_join_rsp_ind__init
                     (ZdoMgmtDirectJoinRspInd         *message);
size_t zdo_mgmt_direct_join_rsp_ind__get_packed_size
                     (const ZdoMgmtDirectJoinRspInd   *message);
size_t zdo_mgmt_direct_join_rsp_ind__pack
                     (const ZdoMgmtDirectJoinRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_direct_join_rsp_ind__pack_to_buffer
                     (const ZdoMgmtDirectJoinRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtDirectJoinRspInd *
       zdo_mgmt_direct_join_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_direct_join_rsp_ind__free_unpacked
                     (ZdoMgmtDirectJoinRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtPermitJoinRspInd methods */
void   zdo_mgmt_permit_join_rsp_ind__init
                     (ZdoMgmtPermitJoinRspInd         *message);
size_t zdo_mgmt_permit_join_rsp_ind__get_packed_size
                     (const ZdoMgmtPermitJoinRspInd   *message);
size_t zdo_mgmt_permit_join_rsp_ind__pack
                     (const ZdoMgmtPermitJoinRspInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_permit_join_rsp_ind__pack_to_buffer
                     (const ZdoMgmtPermitJoinRspInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtPermitJoinRspInd *
       zdo_mgmt_permit_join_rsp_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_permit_join_rsp_ind__free_unpacked
                     (ZdoMgmtPermitJoinRspInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoMgmtNwkUpdateNotifyInd methods */
void   zdo_mgmt_nwk_update_notify_ind__init
                     (ZdoMgmtNwkUpdateNotifyInd         *message);
size_t zdo_mgmt_nwk_update_notify_ind__get_packed_size
                     (const ZdoMgmtNwkUpdateNotifyInd   *message);
size_t zdo_mgmt_nwk_update_notify_ind__pack
                     (const ZdoMgmtNwkUpdateNotifyInd   *message,
                      uint8_t             *out);
size_t zdo_mgmt_nwk_update_notify_ind__pack_to_buffer
                     (const ZdoMgmtNwkUpdateNotifyInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoMgmtNwkUpdateNotifyInd *
       zdo_mgmt_nwk_update_notify_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_mgmt_nwk_update_notify_ind__free_unpacked
                     (ZdoMgmtNwkUpdateNotifyInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoTcDeviceInd methods */
void   zdo_tc_device_ind__init
                     (ZdoTcDeviceInd         *message);
size_t zdo_tc_device_ind__get_packed_size
                     (const ZdoTcDeviceInd   *message);
size_t zdo_tc_device_ind__pack
                     (const ZdoTcDeviceInd   *message,
                      uint8_t             *out);
size_t zdo_tc_device_ind__pack_to_buffer
                     (const ZdoTcDeviceInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoTcDeviceInd *
       zdo_tc_device_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_tc_device_ind__free_unpacked
                     (ZdoTcDeviceInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoSrcRtgInd methods */
void   zdo_src_rtg_ind__init
                     (ZdoSrcRtgInd         *message);
size_t zdo_src_rtg_ind__get_packed_size
                     (const ZdoSrcRtgInd   *message);
size_t zdo_src_rtg_ind__pack
                     (const ZdoSrcRtgInd   *message,
                      uint8_t             *out);
size_t zdo_src_rtg_ind__pack_to_buffer
                     (const ZdoSrcRtgInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoSrcRtgInd *
       zdo_src_rtg_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_src_rtg_ind__free_unpacked
                     (ZdoSrcRtgInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoConcentratorInd methods */
void   zdo_concentrator_ind__init
                     (ZdoConcentratorInd         *message);
size_t zdo_concentrator_ind__get_packed_size
                     (const ZdoConcentratorInd   *message);
size_t zdo_concentrator_ind__pack
                     (const ZdoConcentratorInd   *message,
                      uint8_t             *out);
size_t zdo_concentrator_ind__pack_to_buffer
                     (const ZdoConcentratorInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoConcentratorInd *
       zdo_concentrator_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_concentrator_ind__free_unpacked
                     (ZdoConcentratorInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoNwkDiscCnf methods */
void   zdo_nwk_disc_cnf__init
                     (ZdoNwkDiscCnf         *message);
size_t zdo_nwk_disc_cnf__get_packed_size
                     (const ZdoNwkDiscCnf   *message);
size_t zdo_nwk_disc_cnf__pack
                     (const ZdoNwkDiscCnf   *message,
                      uint8_t             *out);
size_t zdo_nwk_disc_cnf__pack_to_buffer
                     (const ZdoNwkDiscCnf   *message,
                      ProtobufCBuffer     *buffer);
ZdoNwkDiscCnf *
       zdo_nwk_disc_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_nwk_disc_cnf__free_unpacked
                     (ZdoNwkDiscCnf *message,
                      ProtobufCAllocator *allocator);
/* ZdoBeaconNotifyInd methods */
void   zdo_beacon_notify_ind__init
                     (ZdoBeaconNotifyInd         *message);
size_t zdo_beacon_notify_ind__get_packed_size
                     (const ZdoBeaconNotifyInd   *message);
size_t zdo_beacon_notify_ind__pack
                     (const ZdoBeaconNotifyInd   *message,
                      uint8_t             *out);
size_t zdo_beacon_notify_ind__pack_to_buffer
                     (const ZdoBeaconNotifyInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoBeaconNotifyInd *
       zdo_beacon_notify_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_beacon_notify_ind__free_unpacked
                     (ZdoBeaconNotifyInd *message,
                      ProtobufCAllocator *allocator);
/* ZdoJoinCnf methods */
void   zdo_join_cnf__init
                     (ZdoJoinCnf         *message);
size_t zdo_join_cnf__get_packed_size
                     (const ZdoJoinCnf   *message);
size_t zdo_join_cnf__pack
                     (const ZdoJoinCnf   *message,
                      uint8_t             *out);
size_t zdo_join_cnf__pack_to_buffer
                     (const ZdoJoinCnf   *message,
                      ProtobufCBuffer     *buffer);
ZdoJoinCnf *
       zdo_join_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_join_cnf__free_unpacked
                     (ZdoJoinCnf *message,
                      ProtobufCAllocator *allocator);
/* ZdoLeaveCnf methods */
void   zdo_leave_cnf__init
                     (ZdoLeaveCnf         *message);
size_t zdo_leave_cnf__get_packed_size
                     (const ZdoLeaveCnf   *message);
size_t zdo_leave_cnf__pack
                     (const ZdoLeaveCnf   *message,
                      uint8_t             *out);
size_t zdo_leave_cnf__pack_to_buffer
                     (const ZdoLeaveCnf   *message,
                      ProtobufCBuffer     *buffer);
ZdoLeaveCnf *
       zdo_leave_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_leave_cnf__free_unpacked
                     (ZdoLeaveCnf *message,
                      ProtobufCAllocator *allocator);
/* ZdoLeaveInd methods */
void   zdo_leave_ind__init
                     (ZdoLeaveInd         *message);
size_t zdo_leave_ind__get_packed_size
                     (const ZdoLeaveInd   *message);
size_t zdo_leave_ind__pack
                     (const ZdoLeaveInd   *message,
                      uint8_t             *out);
size_t zdo_leave_ind__pack_to_buffer
                     (const ZdoLeaveInd   *message,
                      ProtobufCBuffer     *buffer);
ZdoLeaveInd *
       zdo_leave_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zdo_leave_ind__free_unpacked
                     (ZdoLeaveInd *message,
                      ProtobufCAllocator *allocator);
/* AppCnfCommissioningNotification methods */
void   app_cnf_commissioning_notification__init
                     (AppCnfCommissioningNotification         *message);
size_t app_cnf_commissioning_notification__get_packed_size
                     (const AppCnfCommissioningNotification   *message);
size_t app_cnf_commissioning_notification__pack
                     (const AppCnfCommissioningNotification   *message,
                      uint8_t             *out);
size_t app_cnf_commissioning_notification__pack_to_buffer
                     (const AppCnfCommissioningNotification   *message,
                      ProtobufCBuffer     *buffer);
AppCnfCommissioningNotification *
       app_cnf_commissioning_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app_cnf_commissioning_notification__free_unpacked
                     (AppCnfCommissioningNotification *message,
                      ProtobufCAllocator *allocator);
/* DevStateChangeInd methods */
void   dev_state_change_ind__init
                     (DevStateChangeInd         *message);
size_t dev_state_change_ind__get_packed_size
                     (const DevStateChangeInd   *message);
size_t dev_state_change_ind__pack
                     (const DevStateChangeInd   *message,
                      uint8_t             *out);
size_t dev_state_change_ind__pack_to_buffer
                     (const DevStateChangeInd   *message,
                      ProtobufCBuffer     *buffer);
DevStateChangeInd *
       dev_state_change_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_state_change_ind__free_unpacked
                     (DevStateChangeInd *message,
                      ProtobufCAllocator *allocator);
/* SecNwkKeyGetReq methods */
void   sec_nwk_key_get_req__init
                     (SecNwkKeyGetReq         *message);
size_t sec_nwk_key_get_req__get_packed_size
                     (const SecNwkKeyGetReq   *message);
size_t sec_nwk_key_get_req__pack
                     (const SecNwkKeyGetReq   *message,
                      uint8_t             *out);
size_t sec_nwk_key_get_req__pack_to_buffer
                     (const SecNwkKeyGetReq   *message,
                      ProtobufCBuffer     *buffer);
SecNwkKeyGetReq *
       sec_nwk_key_get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_nwk_key_get_req__free_unpacked
                     (SecNwkKeyGetReq *message,
                      ProtobufCAllocator *allocator);
/* SecNwkKeySetReq methods */
void   sec_nwk_key_set_req__init
                     (SecNwkKeySetReq         *message);
size_t sec_nwk_key_set_req__get_packed_size
                     (const SecNwkKeySetReq   *message);
size_t sec_nwk_key_set_req__pack
                     (const SecNwkKeySetReq   *message,
                      uint8_t             *out);
size_t sec_nwk_key_set_req__pack_to_buffer
                     (const SecNwkKeySetReq   *message,
                      ProtobufCBuffer     *buffer);
SecNwkKeySetReq *
       sec_nwk_key_set_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_nwk_key_set_req__free_unpacked
                     (SecNwkKeySetReq *message,
                      ProtobufCAllocator *allocator);
/* SecNwkKeyUpdateReq methods */
void   sec_nwk_key_update_req__init
                     (SecNwkKeyUpdateReq         *message);
size_t sec_nwk_key_update_req__get_packed_size
                     (const SecNwkKeyUpdateReq   *message);
size_t sec_nwk_key_update_req__pack
                     (const SecNwkKeyUpdateReq   *message,
                      uint8_t             *out);
size_t sec_nwk_key_update_req__pack_to_buffer
                     (const SecNwkKeyUpdateReq   *message,
                      ProtobufCBuffer     *buffer);
SecNwkKeyUpdateReq *
       sec_nwk_key_update_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_nwk_key_update_req__free_unpacked
                     (SecNwkKeyUpdateReq *message,
                      ProtobufCAllocator *allocator);
/* SecNwkKeySwitchReq methods */
void   sec_nwk_key_switch_req__init
                     (SecNwkKeySwitchReq         *message);
size_t sec_nwk_key_switch_req__get_packed_size
                     (const SecNwkKeySwitchReq   *message);
size_t sec_nwk_key_switch_req__pack
                     (const SecNwkKeySwitchReq   *message,
                      uint8_t             *out);
size_t sec_nwk_key_switch_req__pack_to_buffer
                     (const SecNwkKeySwitchReq   *message,
                      ProtobufCBuffer     *buffer);
SecNwkKeySwitchReq *
       sec_nwk_key_switch_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_nwk_key_switch_req__free_unpacked
                     (SecNwkKeySwitchReq *message,
                      ProtobufCAllocator *allocator);
/* SecApsLinkKeyGetReq methods */
void   sec_aps_link_key_get_req__init
                     (SecApsLinkKeyGetReq         *message);
size_t sec_aps_link_key_get_req__get_packed_size
                     (const SecApsLinkKeyGetReq   *message);
size_t sec_aps_link_key_get_req__pack
                     (const SecApsLinkKeyGetReq   *message,
                      uint8_t             *out);
size_t sec_aps_link_key_get_req__pack_to_buffer
                     (const SecApsLinkKeyGetReq   *message,
                      ProtobufCBuffer     *buffer);
SecApsLinkKeyGetReq *
       sec_aps_link_key_get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_aps_link_key_get_req__free_unpacked
                     (SecApsLinkKeyGetReq *message,
                      ProtobufCAllocator *allocator);
/* SecApsLinkKeySetReq methods */
void   sec_aps_link_key_set_req__init
                     (SecApsLinkKeySetReq         *message);
size_t sec_aps_link_key_set_req__get_packed_size
                     (const SecApsLinkKeySetReq   *message);
size_t sec_aps_link_key_set_req__pack
                     (const SecApsLinkKeySetReq   *message,
                      uint8_t             *out);
size_t sec_aps_link_key_set_req__pack_to_buffer
                     (const SecApsLinkKeySetReq   *message,
                      ProtobufCBuffer     *buffer);
SecApsLinkKeySetReq *
       sec_aps_link_key_set_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_aps_link_key_set_req__free_unpacked
                     (SecApsLinkKeySetReq *message,
                      ProtobufCAllocator *allocator);
/* SecApsLinkKeyRemoveReq methods */
void   sec_aps_link_key_remove_req__init
                     (SecApsLinkKeyRemoveReq         *message);
size_t sec_aps_link_key_remove_req__get_packed_size
                     (const SecApsLinkKeyRemoveReq   *message);
size_t sec_aps_link_key_remove_req__pack
                     (const SecApsLinkKeyRemoveReq   *message,
                      uint8_t             *out);
size_t sec_aps_link_key_remove_req__pack_to_buffer
                     (const SecApsLinkKeyRemoveReq   *message,
                      ProtobufCBuffer     *buffer);
SecApsLinkKeyRemoveReq *
       sec_aps_link_key_remove_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_aps_link_key_remove_req__free_unpacked
                     (SecApsLinkKeyRemoveReq *message,
                      ProtobufCAllocator *allocator);
/* SecApsRemoveReq methods */
void   sec_aps_remove_req__init
                     (SecApsRemoveReq         *message);
size_t sec_aps_remove_req__get_packed_size
                     (const SecApsRemoveReq   *message);
size_t sec_aps_remove_req__pack
                     (const SecApsRemoveReq   *message,
                      uint8_t             *out);
size_t sec_aps_remove_req__pack_to_buffer
                     (const SecApsRemoveReq   *message,
                      ProtobufCBuffer     *buffer);
SecApsRemoveReq *
       sec_aps_remove_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_aps_remove_req__free_unpacked
                     (SecApsRemoveReq *message,
                      ProtobufCAllocator *allocator);
/* SecNwkKeyGetRsp methods */
void   sec_nwk_key_get_rsp__init
                     (SecNwkKeyGetRsp         *message);
size_t sec_nwk_key_get_rsp__get_packed_size
                     (const SecNwkKeyGetRsp   *message);
size_t sec_nwk_key_get_rsp__pack
                     (const SecNwkKeyGetRsp   *message,
                      uint8_t             *out);
size_t sec_nwk_key_get_rsp__pack_to_buffer
                     (const SecNwkKeyGetRsp   *message,
                      ProtobufCBuffer     *buffer);
SecNwkKeyGetRsp *
       sec_nwk_key_get_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_nwk_key_get_rsp__free_unpacked
                     (SecNwkKeyGetRsp *message,
                      ProtobufCAllocator *allocator);
/* SecApsLinkKeyGetRsp methods */
void   sec_aps_link_key_get_rsp__init
                     (SecApsLinkKeyGetRsp         *message);
size_t sec_aps_link_key_get_rsp__get_packed_size
                     (const SecApsLinkKeyGetRsp   *message);
size_t sec_aps_link_key_get_rsp__pack
                     (const SecApsLinkKeyGetRsp   *message,
                      uint8_t             *out);
size_t sec_aps_link_key_get_rsp__pack_to_buffer
                     (const SecApsLinkKeyGetRsp   *message,
                      ProtobufCBuffer     *buffer);
SecApsLinkKeyGetRsp *
       sec_aps_link_key_get_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sec_aps_link_key_get_rsp__free_unpacked
                     (SecApsLinkKeyGetRsp *message,
                      ProtobufCAllocator *allocator);
/* GpSecReqIncomingMsgInd methods */
void   gp_sec_req_incoming_msg_ind__init
                     (GpSecReqIncomingMsgInd         *message);
size_t gp_sec_req_incoming_msg_ind__get_packed_size
                     (const GpSecReqIncomingMsgInd   *message);
size_t gp_sec_req_incoming_msg_ind__pack
                     (const GpSecReqIncomingMsgInd   *message,
                      uint8_t             *out);
size_t gp_sec_req_incoming_msg_ind__pack_to_buffer
                     (const GpSecReqIncomingMsgInd   *message,
                      ProtobufCBuffer     *buffer);
GpSecReqIncomingMsgInd *
       gp_sec_req_incoming_msg_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gp_sec_req_incoming_msg_ind__free_unpacked
                     (GpSecReqIncomingMsgInd *message,
                      ProtobufCAllocator *allocator);
/* GpSecRspMsg methods */
void   gp_sec_rsp_msg__init
                     (GpSecRspMsg         *message);
size_t gp_sec_rsp_msg__get_packed_size
                     (const GpSecRspMsg   *message);
size_t gp_sec_rsp_msg__pack
                     (const GpSecRspMsg   *message,
                      uint8_t             *out);
size_t gp_sec_rsp_msg__pack_to_buffer
                     (const GpSecRspMsg   *message,
                      ProtobufCBuffer     *buffer);
GpSecRspMsg *
       gp_sec_rsp_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gp_sec_rsp_msg__free_unpacked
                     (GpSecRspMsg *message,
                      ProtobufCAllocator *allocator);
/* AppCnfAddInstallCodeReq methods */
void   app_cnf_add_install_code_req__init
                     (AppCnfAddInstallCodeReq         *message);
size_t app_cnf_add_install_code_req__get_packed_size
                     (const AppCnfAddInstallCodeReq   *message);
size_t app_cnf_add_install_code_req__pack
                     (const AppCnfAddInstallCodeReq   *message,
                      uint8_t             *out);
size_t app_cnf_add_install_code_req__pack_to_buffer
                     (const AppCnfAddInstallCodeReq   *message,
                      ProtobufCBuffer     *buffer);
AppCnfAddInstallCodeReq *
       app_cnf_add_install_code_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app_cnf_add_install_code_req__free_unpacked
                     (AppCnfAddInstallCodeReq *message,
                      ProtobufCAllocator *allocator);
/* ZstackDefaultRsp methods */
void   zstack_default_rsp__init
                     (ZstackDefaultRsp         *message);
size_t zstack_default_rsp__get_packed_size
                     (const ZstackDefaultRsp   *message);
size_t zstack_default_rsp__pack
                     (const ZstackDefaultRsp   *message,
                      uint8_t             *out);
size_t zstack_default_rsp__pack_to_buffer
                     (const ZstackDefaultRsp   *message,
                      ProtobufCBuffer     *buffer);
ZstackDefaultRsp *
       zstack_default_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zstack_default_rsp__free_unpacked
                     (ZstackDefaultRsp *message,
                      ProtobufCAllocator *allocator);
/* SendGetDevNwkInfoReq methods */
void   send_get_dev_nwk_info_req__init
                     (SendGetDevNwkInfoReq         *message);
size_t send_get_dev_nwk_info_req__get_packed_size
                     (const SendGetDevNwkInfoReq   *message);
size_t send_get_dev_nwk_info_req__pack
                     (const SendGetDevNwkInfoReq   *message,
                      uint8_t             *out);
size_t send_get_dev_nwk_info_req__pack_to_buffer
                     (const SendGetDevNwkInfoReq   *message,
                      ProtobufCBuffer     *buffer);
SendGetDevNwkInfoReq *
       send_get_dev_nwk_info_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_get_dev_nwk_info_req__free_unpacked
                     (SendGetDevNwkInfoReq *message,
                      ProtobufCAllocator *allocator);
/* GpDataIndIncomingMsgInd methods */
void   gp_data_ind_incoming_msg_ind__init
                     (GpDataIndIncomingMsgInd         *message);
size_t gp_data_ind_incoming_msg_ind__get_packed_size
                     (const GpDataIndIncomingMsgInd   *message);
size_t gp_data_ind_incoming_msg_ind__pack
                     (const GpDataIndIncomingMsgInd   *message,
                      uint8_t             *out);
size_t gp_data_ind_incoming_msg_ind__pack_to_buffer
                     (const GpDataIndIncomingMsgInd   *message,
                      ProtobufCBuffer     *buffer);
GpDataIndIncomingMsgInd *
       gp_data_ind_incoming_msg_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gp_data_ind_incoming_msg_ind__free_unpacked
                     (GpDataIndIncomingMsgInd *message,
                      ProtobufCAllocator *allocator);
/* UtilSetDevNwkInfoReq methods */
void   util_set_dev_nwk_info_req__init
                     (UtilSetDevNwkInfoReq         *message);
size_t util_set_dev_nwk_info_req__get_packed_size
                     (const UtilSetDevNwkInfoReq   *message);
size_t util_set_dev_nwk_info_req__pack
                     (const UtilSetDevNwkInfoReq   *message,
                      uint8_t             *out);
size_t util_set_dev_nwk_info_req__pack_to_buffer
                     (const UtilSetDevNwkInfoReq   *message,
                      ProtobufCBuffer     *buffer);
UtilSetDevNwkInfoReq *
       util_set_dev_nwk_info_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   util_set_dev_nwk_info_req__free_unpacked
                     (UtilSetDevNwkInfoReq *message,
                      ProtobufCAllocator *allocator);
/* AppCnfStartCommissioningReq methods */
void   app_cnf_start_commissioning_req__init
                     (AppCnfStartCommissioningReq         *message);
size_t app_cnf_start_commissioning_req__get_packed_size
                     (const AppCnfStartCommissioningReq   *message);
size_t app_cnf_start_commissioning_req__pack
                     (const AppCnfStartCommissioningReq   *message,
                      uint8_t             *out);
size_t app_cnf_start_commissioning_req__pack_to_buffer
                     (const AppCnfStartCommissioningReq   *message,
                      ProtobufCBuffer     *buffer);
AppCnfStartCommissioningReq *
       app_cnf_start_commissioning_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app_cnf_start_commissioning_req__free_unpacked
                     (AppCnfStartCommissioningReq *message,
                      ProtobufCAllocator *allocator);
/* ZclActionReq methods */
void   zcl_action_req__init
                     (ZclActionReq         *message);
size_t zcl_action_req__get_packed_size
                     (const ZclActionReq   *message);
size_t zcl_action_req__pack
                     (const ZclActionReq   *message,
                      uint8_t             *out);
size_t zcl_action_req__pack_to_buffer
                     (const ZclActionReq   *message,
                      ProtobufCBuffer     *buffer);
ZclActionReq *
       zcl_action_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zcl_action_req__free_unpacked
                     (ZclActionReq *message,
                      ProtobufCAllocator *allocator);
/* ZclActionRsp methods */
void   zcl_action_rsp__init
                     (ZclActionRsp         *message);
size_t zcl_action_rsp__get_packed_size
                     (const ZclActionRsp   *message);
size_t zcl_action_rsp__pack
                     (const ZclActionRsp   *message,
                      uint8_t             *out);
size_t zcl_action_rsp__pack_to_buffer
                     (const ZclActionRsp   *message,
                      ProtobufCBuffer     *buffer);
ZclActionRsp *
       zcl_action_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zcl_action_rsp__free_unpacked
                     (ZclActionRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AFAddr_Closure)
                 (const AFAddr *message,
                  void *closure_data);
typedef void (*StartupOptions_Closure)
                 (const StartupOptions *message,
                  void *closure_data);
typedef void (*SimpleDescriptor_Closure)
                 (const SimpleDescriptor *message,
                  void *closure_data);
typedef void (*TransOptions_Closure)
                 (const TransOptions *message,
                  void *closure_data);
typedef void (*CapabilityInfo_Closure)
                 (const CapabilityInfo *message,
                  void *closure_data);
typedef void (*ServerCapabilities_Closure)
                 (const ServerCapabilities *message,
                  void *closure_data);
typedef void (*BindRec_Closure)
                 (const BindRec *message,
                  void *closure_data);
typedef void (*LeaveOptions_Closure)
                 (const LeaveOptions *message,
                  void *closure_data);
typedef void (*NodeDescriptor_Closure)
                 (const NodeDescriptor *message,
                  void *closure_data);
typedef void (*PowerSource_Closure)
                 (const PowerSource *message,
                  void *closure_data);
typedef void (*PowerDescriptor_Closure)
                 (const PowerDescriptor *message,
                  void *closure_data);
typedef void (*NwkDiscItem_Closure)
                 (const NwkDiscItem *message,
                  void *closure_data);
typedef void (*NeighborLqiItem_Closure)
                 (const NeighborLqiItem *message,
                  void *closure_data);
typedef void (*RtgItem_Closure)
                 (const RtgItem *message,
                  void *closure_data);
typedef void (*BindItem_Closure)
                 (const BindItem *message,
                  void *closure_data);
typedef void (*DeviceTypes_Closure)
                 (const DeviceTypes *message,
                  void *closure_data);
typedef void (*SysResetReq_Closure)
                 (const SysResetReq *message,
                  void *closure_data);
typedef void (*SysVersionReq_Closure)
                 (const SysVersionReq *message,
                  void *closure_data);
typedef void (*SysConfigReadReq_Closure)
                 (const SysConfigReadReq *message,
                  void *closure_data);
typedef void (*SysConfigWriteReq_Closure)
                 (const SysConfigWriteReq *message,
                  void *closure_data);
typedef void (*SysSetTxPowerReq_Closure)
                 (const SysSetTxPowerReq *message,
                  void *closure_data);
typedef void (*SysNwkInfoReadReq_Closure)
                 (const SysNwkInfoReadReq *message,
                  void *closure_data);
typedef void (*SysResetInd_Closure)
                 (const SysResetInd *message,
                  void *closure_data);
typedef void (*SysVersionRsp_Closure)
                 (const SysVersionRsp *message,
                  void *closure_data);
typedef void (*SysConfigReadRsp_Closure)
                 (const SysConfigReadRsp *message,
                  void *closure_data);
typedef void (*SysSetTxPowerRsp_Closure)
                 (const SysSetTxPowerRsp *message,
                  void *closure_data);
typedef void (*SysNwkInfoReadRsp_Closure)
                 (const SysNwkInfoReadRsp *message,
                  void *closure_data);
typedef void (*DevStartReq_Closure)
                 (const DevStartReq *message,
                  void *closure_data);
typedef void (*DevNwkDiscReq_Closure)
                 (const DevNwkDiscReq *message,
                  void *closure_data);
typedef void (*DevJoinReq_Closure)
                 (const DevJoinReq *message,
                  void *closure_data);
typedef void (*DevRejoinReq_Closure)
                 (const DevRejoinReq *message,
                  void *closure_data);
typedef void (*DevZDOCBReq_Closure)
                 (const DevZDOCBReq *message,
                  void *closure_data);
typedef void (*DevNwkRouteReq_Closure)
                 (const DevNwkRouteReq *message,
                  void *closure_data);
typedef void (*DevNwkCheckRouteReq_Closure)
                 (const DevNwkCheckRouteReq *message,
                  void *closure_data);
typedef void (*DevJammerInd_Closure)
                 (const DevJammerInd *message,
                  void *closure_data);
typedef void (*DevPermitJoinInd_Closure)
                 (const DevPermitJoinInd *message,
                  void *closure_data);
typedef void (*ApsRemoveGroup_Closure)
                 (const ApsRemoveGroup *message,
                  void *closure_data);
typedef void (*ApsRemoveAllGroups_Closure)
                 (const ApsRemoveAllGroups *message,
                  void *closure_data);
typedef void (*ApsFindAllGroupsReq_Closure)
                 (const ApsFindAllGroupsReq *message,
                  void *closure_data);
typedef void (*ApsFindAllGroupsRsp_Closure)
                 (const ApsFindAllGroupsRsp *message,
                  void *closure_data);
typedef void (*ApsFindGroupReq_Closure)
                 (const ApsFindGroupReq *message,
                  void *closure_data);
typedef void (*ApsFindGroupRsp_Closure)
                 (const ApsFindGroupRsp *message,
                  void *closure_data);
typedef void (*ApsAddGroup_Closure)
                 (const ApsAddGroup *message,
                  void *closure_data);
typedef void (*ApsCountAllGroups_Closure)
                 (const ApsCountAllGroups *message,
                  void *closure_data);
typedef void (*AfRegisterReq_Closure)
                 (const AfRegisterReq *message,
                  void *closure_data);
typedef void (*AfUnRegisterReq_Closure)
                 (const AfUnRegisterReq *message,
                  void *closure_data);
typedef void (*AfDataReq_Closure)
                 (const AfDataReq *message,
                  void *closure_data);
typedef void (*AfInterPanCtlReq_Closure)
                 (const AfInterPanCtlReq *message,
                  void *closure_data);
typedef void (*AfConfigGetReq_Closure)
                 (const AfConfigGetReq *message,
                  void *closure_data);
typedef void (*AfConfigSetReq_Closure)
                 (const AfConfigSetReq *message,
                  void *closure_data);
typedef void (*AfConfigGetRsp_Closure)
                 (const AfConfigGetRsp *message,
                  void *closure_data);
typedef void (*AfDataConfirmInd_Closure)
                 (const AfDataConfirmInd *message,
                  void *closure_data);
typedef void (*AfIncomingMsgInd_Closure)
                 (const AfIncomingMsgInd *message,
                  void *closure_data);
typedef void (*AfReflectErrorInd_Closure)
                 (const AfReflectErrorInd *message,
                  void *closure_data);
typedef void (*ZdoNwkAddrReq_Closure)
                 (const ZdoNwkAddrReq *message,
                  void *closure_data);
typedef void (*ZdoIeeeAddrReq_Closure)
                 (const ZdoIeeeAddrReq *message,
                  void *closure_data);
typedef void (*ZdoNodeDescReq_Closure)
                 (const ZdoNodeDescReq *message,
                  void *closure_data);
typedef void (*ZdoPowerDescReq_Closure)
                 (const ZdoPowerDescReq *message,
                  void *closure_data);
typedef void (*ZdoSimpleDescReq_Closure)
                 (const ZdoSimpleDescReq *message,
                  void *closure_data);
typedef void (*ZdoActiveEndpointReq_Closure)
                 (const ZdoActiveEndpointReq *message,
                  void *closure_data);
typedef void (*ZdoMatchDescReq_Closure)
                 (const ZdoMatchDescReq *message,
                  void *closure_data);
typedef void (*ZdoComplexDescReq_Closure)
                 (const ZdoComplexDescReq *message,
                  void *closure_data);
typedef void (*ZdoUserDescReq_Closure)
                 (const ZdoUserDescReq *message,
                  void *closure_data);
typedef void (*ZdoDeviceAnnounceReq_Closure)
                 (const ZdoDeviceAnnounceReq *message,
                  void *closure_data);
typedef void (*ZdoUserDescSetReq_Closure)
                 (const ZdoUserDescSetReq *message,
                  void *closure_data);
typedef void (*ZdoServerDiscReq_Closure)
                 (const ZdoServerDiscReq *message,
                  void *closure_data);
typedef void (*ZdoEndDeviceBindReq_Closure)
                 (const ZdoEndDeviceBindReq *message,
                  void *closure_data);
typedef void (*ZdoBindReq_Closure)
                 (const ZdoBindReq *message,
                  void *closure_data);
typedef void (*ZdoUnbindReq_Closure)
                 (const ZdoUnbindReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtNwkDiscReq_Closure)
                 (const ZdoMgmtNwkDiscReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtLqiReq_Closure)
                 (const ZdoMgmtLqiReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtRtgReq_Closure)
                 (const ZdoMgmtRtgReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtBindReq_Closure)
                 (const ZdoMgmtBindReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtLeaveReq_Closure)
                 (const ZdoMgmtLeaveReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtDirectJoinReq_Closure)
                 (const ZdoMgmtDirectJoinReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtPermitJoinReq_Closure)
                 (const ZdoMgmtPermitJoinReq *message,
                  void *closure_data);
typedef void (*ZdoMgmtNwkUpdateReq_Closure)
                 (const ZdoMgmtNwkUpdateReq *message,
                  void *closure_data);
typedef void (*ZdoNwkAddrRspInd_Closure)
                 (const ZdoNwkAddrRspInd *message,
                  void *closure_data);
typedef void (*ZdoIeeeAddrRspInd_Closure)
                 (const ZdoIeeeAddrRspInd *message,
                  void *closure_data);
typedef void (*ZdoNodeDescRspInd_Closure)
                 (const ZdoNodeDescRspInd *message,
                  void *closure_data);
typedef void (*ZdoPowerDescRspInd_Closure)
                 (const ZdoPowerDescRspInd *message,
                  void *closure_data);
typedef void (*ZdoSimpleDescRspInd_Closure)
                 (const ZdoSimpleDescRspInd *message,
                  void *closure_data);
typedef void (*ZdoActiveEndpointsRspInd_Closure)
                 (const ZdoActiveEndpointsRspInd *message,
                  void *closure_data);
typedef void (*ZdoMatchDescRspInd_Closure)
                 (const ZdoMatchDescRspInd *message,
                  void *closure_data);
typedef void (*ZdoUserDescRspInd_Closure)
                 (const ZdoUserDescRspInd *message,
                  void *closure_data);
typedef void (*ZdoServerDiscoveryRspInd_Closure)
                 (const ZdoServerDiscoveryRspInd *message,
                  void *closure_data);
typedef void (*ZdoEndDeviceTimeoutRspInd_Closure)
                 (const ZdoEndDeviceTimeoutRspInd *message,
                  void *closure_data);
typedef void (*ZdoBindRspInd_Closure)
                 (const ZdoBindRspInd *message,
                  void *closure_data);
typedef void (*ZdoEndDeviceBindRspInd_Closure)
                 (const ZdoEndDeviceBindRspInd *message,
                  void *closure_data);
typedef void (*ZdoUnbindRspInd_Closure)
                 (const ZdoUnbindRspInd *message,
                  void *closure_data);
typedef void (*ZdoDeviceAnnounceInd_Closure)
                 (const ZdoDeviceAnnounceInd *message,
                  void *closure_data);
typedef void (*ZdoDeviceAnnounceShadowInd_Closure)
                 (const ZdoDeviceAnnounceShadowInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtNwkDiscRspInd_Closure)
                 (const ZdoMgmtNwkDiscRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtLqiRspInd_Closure)
                 (const ZdoMgmtLqiRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtRtgRspInd_Closure)
                 (const ZdoMgmtRtgRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtBindRspInd_Closure)
                 (const ZdoMgmtBindRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtLeaveRspInd_Closure)
                 (const ZdoMgmtLeaveRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtDirectJoinRspInd_Closure)
                 (const ZdoMgmtDirectJoinRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtPermitJoinRspInd_Closure)
                 (const ZdoMgmtPermitJoinRspInd *message,
                  void *closure_data);
typedef void (*ZdoMgmtNwkUpdateNotifyInd_Closure)
                 (const ZdoMgmtNwkUpdateNotifyInd *message,
                  void *closure_data);
typedef void (*ZdoTcDeviceInd_Closure)
                 (const ZdoTcDeviceInd *message,
                  void *closure_data);
typedef void (*ZdoSrcRtgInd_Closure)
                 (const ZdoSrcRtgInd *message,
                  void *closure_data);
typedef void (*ZdoConcentratorInd_Closure)
                 (const ZdoConcentratorInd *message,
                  void *closure_data);
typedef void (*ZdoNwkDiscCnf_Closure)
                 (const ZdoNwkDiscCnf *message,
                  void *closure_data);
typedef void (*ZdoBeaconNotifyInd_Closure)
                 (const ZdoBeaconNotifyInd *message,
                  void *closure_data);
typedef void (*ZdoJoinCnf_Closure)
                 (const ZdoJoinCnf *message,
                  void *closure_data);
typedef void (*ZdoLeaveCnf_Closure)
                 (const ZdoLeaveCnf *message,
                  void *closure_data);
typedef void (*ZdoLeaveInd_Closure)
                 (const ZdoLeaveInd *message,
                  void *closure_data);
typedef void (*AppCnfCommissioningNotification_Closure)
                 (const AppCnfCommissioningNotification *message,
                  void *closure_data);
typedef void (*DevStateChangeInd_Closure)
                 (const DevStateChangeInd *message,
                  void *closure_data);
typedef void (*SecNwkKeyGetReq_Closure)
                 (const SecNwkKeyGetReq *message,
                  void *closure_data);
typedef void (*SecNwkKeySetReq_Closure)
                 (const SecNwkKeySetReq *message,
                  void *closure_data);
typedef void (*SecNwkKeyUpdateReq_Closure)
                 (const SecNwkKeyUpdateReq *message,
                  void *closure_data);
typedef void (*SecNwkKeySwitchReq_Closure)
                 (const SecNwkKeySwitchReq *message,
                  void *closure_data);
typedef void (*SecApsLinkKeyGetReq_Closure)
                 (const SecApsLinkKeyGetReq *message,
                  void *closure_data);
typedef void (*SecApsLinkKeySetReq_Closure)
                 (const SecApsLinkKeySetReq *message,
                  void *closure_data);
typedef void (*SecApsLinkKeyRemoveReq_Closure)
                 (const SecApsLinkKeyRemoveReq *message,
                  void *closure_data);
typedef void (*SecApsRemoveReq_Closure)
                 (const SecApsRemoveReq *message,
                  void *closure_data);
typedef void (*SecNwkKeyGetRsp_Closure)
                 (const SecNwkKeyGetRsp *message,
                  void *closure_data);
typedef void (*SecApsLinkKeyGetRsp_Closure)
                 (const SecApsLinkKeyGetRsp *message,
                  void *closure_data);
typedef void (*GpSecReqIncomingMsgInd_Closure)
                 (const GpSecReqIncomingMsgInd *message,
                  void *closure_data);
typedef void (*GpSecRspMsg_Closure)
                 (const GpSecRspMsg *message,
                  void *closure_data);
typedef void (*AppCnfAddInstallCodeReq_Closure)
                 (const AppCnfAddInstallCodeReq *message,
                  void *closure_data);
typedef void (*ZstackDefaultRsp_Closure)
                 (const ZstackDefaultRsp *message,
                  void *closure_data);
typedef void (*SendGetDevNwkInfoReq_Closure)
                 (const SendGetDevNwkInfoReq *message,
                  void *closure_data);
typedef void (*GpDataIndIncomingMsgInd_Closure)
                 (const GpDataIndIncomingMsgInd *message,
                  void *closure_data);
typedef void (*UtilSetDevNwkInfoReq_Closure)
                 (const UtilSetDevNwkInfoReq *message,
                  void *closure_data);
typedef void (*AppCnfStartCommissioningReq_Closure)
                 (const AppCnfStartCommissioningReq *message,
                  void *closure_data);
typedef void (*ZclActionReq_Closure)
                 (const ZclActionReq *message,
                  void *closure_data);
typedef void (*ZclActionRsp_Closure)
                 (const ZclActionRsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    zstack_apiversion__descriptor;
extern const ProtobufCEnumDescriptor    zstack_sys_ids__descriptor;
extern const ProtobufCEnumDescriptor    zstack_cmd_ids__descriptor;
extern const ProtobufCEnumDescriptor    zstatus_values__descriptor;
extern const ProtobufCEnumDescriptor    comm_notification__descriptor;
extern const ProtobufCEnumDescriptor    zstack_server_type__descriptor;
extern const ProtobufCEnumDescriptor    afaddr_mode__descriptor;
extern const ProtobufCEnumDescriptor    reset_types__descriptor;
extern const ProtobufCEnumDescriptor    reset_reasons__descriptor;
extern const ProtobufCEnumDescriptor    logical_types__descriptor;
extern const ProtobufCEnumDescriptor    network_latency__descriptor;
extern const ProtobufCEnumDescriptor    nwk_addr_req_type__descriptor;
extern const ProtobufCEnumDescriptor    power_level__descriptor;
extern const ProtobufCEnumDescriptor    power_modes__descriptor;
extern const ProtobufCEnumDescriptor    zdp_status__descriptor;
extern const ProtobufCEnumDescriptor    dev_state__descriptor;
extern const ProtobufCEnumDescriptor    route_status__descriptor;
extern const ProtobufCEnumDescriptor    rx_on_when_idle_type__descriptor;
extern const ProtobufCEnumDescriptor    relation_type__descriptor;
extern const ProtobufCEnumDescriptor    permit_join_type__descriptor;
extern const ProtobufCMessageDescriptor afaddr__descriptor;
extern const ProtobufCMessageDescriptor startup_options__descriptor;
extern const ProtobufCMessageDescriptor simple_descriptor__descriptor;
extern const ProtobufCMessageDescriptor trans_options__descriptor;
extern const ProtobufCMessageDescriptor capability_info__descriptor;
extern const ProtobufCMessageDescriptor server_capabilities__descriptor;
extern const ProtobufCMessageDescriptor bind_rec__descriptor;
extern const ProtobufCMessageDescriptor leave_options__descriptor;
extern const ProtobufCMessageDescriptor node_descriptor__descriptor;
extern const ProtobufCMessageDescriptor power_source__descriptor;
extern const ProtobufCMessageDescriptor power_descriptor__descriptor;
extern const ProtobufCMessageDescriptor nwk_disc_item__descriptor;
extern const ProtobufCMessageDescriptor neighbor_lqi_item__descriptor;
extern const ProtobufCMessageDescriptor rtg_item__descriptor;
extern const ProtobufCMessageDescriptor bind_item__descriptor;
extern const ProtobufCMessageDescriptor device_types__descriptor;
extern const ProtobufCMessageDescriptor sys_reset_req__descriptor;
extern const ProtobufCMessageDescriptor sys_version_req__descriptor;
extern const ProtobufCMessageDescriptor sys_config_read_req__descriptor;
extern const ProtobufCMessageDescriptor sys_config_write_req__descriptor;
extern const ProtobufCMessageDescriptor sys_set_tx_power_req__descriptor;
extern const ProtobufCMessageDescriptor sys_nwk_info_read_req__descriptor;
extern const ProtobufCMessageDescriptor sys_reset_ind__descriptor;
extern const ProtobufCMessageDescriptor sys_version_rsp__descriptor;
extern const ProtobufCMessageDescriptor sys_config_read_rsp__descriptor;
extern const ProtobufCMessageDescriptor sys_set_tx_power_rsp__descriptor;
extern const ProtobufCMessageDescriptor sys_nwk_info_read_rsp__descriptor;
extern const ProtobufCMessageDescriptor dev_start_req__descriptor;
extern const ProtobufCMessageDescriptor dev_nwk_disc_req__descriptor;
extern const ProtobufCMessageDescriptor dev_join_req__descriptor;
extern const ProtobufCMessageDescriptor dev_rejoin_req__descriptor;
extern const ProtobufCMessageDescriptor dev_zdocbreq__descriptor;
extern const ProtobufCMessageDescriptor dev_nwk_route_req__descriptor;
extern const ProtobufCMessageDescriptor dev_nwk_check_route_req__descriptor;
extern const ProtobufCMessageDescriptor dev_jammer_ind__descriptor;
extern const ProtobufCMessageDescriptor dev_permit_join_ind__descriptor;
extern const ProtobufCMessageDescriptor aps_remove_group__descriptor;
extern const ProtobufCMessageDescriptor aps_remove_all_groups__descriptor;
extern const ProtobufCMessageDescriptor aps_find_all_groups_req__descriptor;
extern const ProtobufCMessageDescriptor aps_find_all_groups_rsp__descriptor;
extern const ProtobufCMessageDescriptor aps_find_group_req__descriptor;
extern const ProtobufCMessageDescriptor aps_find_group_rsp__descriptor;
extern const ProtobufCMessageDescriptor aps_add_group__descriptor;
extern const ProtobufCMessageDescriptor aps_count_all_groups__descriptor;
extern const ProtobufCMessageDescriptor af_register_req__descriptor;
extern const ProtobufCMessageDescriptor af_un_register_req__descriptor;
extern const ProtobufCMessageDescriptor af_data_req__descriptor;
extern const ProtobufCMessageDescriptor af_inter_pan_ctl_req__descriptor;
extern const ProtobufCMessageDescriptor af_config_get_req__descriptor;
extern const ProtobufCMessageDescriptor af_config_set_req__descriptor;
extern const ProtobufCMessageDescriptor af_config_get_rsp__descriptor;
extern const ProtobufCMessageDescriptor af_data_confirm_ind__descriptor;
extern const ProtobufCMessageDescriptor af_incoming_msg_ind__descriptor;
extern const ProtobufCMessageDescriptor af_reflect_error_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_nwk_addr_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_ieee_addr_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_node_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_power_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_simple_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_active_endpoint_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_match_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_complex_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_user_desc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_device_announce_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_user_desc_set_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_server_disc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_end_device_bind_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_bind_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_unbind_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_nwk_disc_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_lqi_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_rtg_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_bind_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_leave_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_direct_join_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_permit_join_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_nwk_update_req__descriptor;
extern const ProtobufCMessageDescriptor zdo_nwk_addr_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_ieee_addr_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_node_desc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_power_desc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_simple_desc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_active_endpoints_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_match_desc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_user_desc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_server_discovery_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_end_device_timeout_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_bind_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_end_device_bind_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_unbind_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_device_announce_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_device_announce_shadow_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_nwk_disc_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_lqi_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_rtg_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_bind_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_leave_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_direct_join_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_permit_join_rsp_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_mgmt_nwk_update_notify_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_tc_device_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_src_rtg_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_concentrator_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_nwk_disc_cnf__descriptor;
extern const ProtobufCMessageDescriptor zdo_beacon_notify_ind__descriptor;
extern const ProtobufCMessageDescriptor zdo_join_cnf__descriptor;
extern const ProtobufCMessageDescriptor zdo_leave_cnf__descriptor;
extern const ProtobufCMessageDescriptor zdo_leave_ind__descriptor;
extern const ProtobufCMessageDescriptor app_cnf_commissioning_notification__descriptor;
extern const ProtobufCMessageDescriptor dev_state_change_ind__descriptor;
extern const ProtobufCMessageDescriptor sec_nwk_key_get_req__descriptor;
extern const ProtobufCMessageDescriptor sec_nwk_key_set_req__descriptor;
extern const ProtobufCMessageDescriptor sec_nwk_key_update_req__descriptor;
extern const ProtobufCMessageDescriptor sec_nwk_key_switch_req__descriptor;
extern const ProtobufCMessageDescriptor sec_aps_link_key_get_req__descriptor;
extern const ProtobufCMessageDescriptor sec_aps_link_key_set_req__descriptor;
extern const ProtobufCMessageDescriptor sec_aps_link_key_remove_req__descriptor;
extern const ProtobufCMessageDescriptor sec_aps_remove_req__descriptor;
extern const ProtobufCMessageDescriptor sec_nwk_key_get_rsp__descriptor;
extern const ProtobufCMessageDescriptor sec_aps_link_key_get_rsp__descriptor;
extern const ProtobufCMessageDescriptor gp_sec_req_incoming_msg_ind__descriptor;
extern const ProtobufCMessageDescriptor gp_sec_rsp_msg__descriptor;
extern const ProtobufCMessageDescriptor app_cnf_add_install_code_req__descriptor;
extern const ProtobufCMessageDescriptor zstack_default_rsp__descriptor;
extern const ProtobufCMessageDescriptor send_get_dev_nwk_info_req__descriptor;
extern const ProtobufCMessageDescriptor gp_data_ind_incoming_msg_ind__descriptor;
extern const ProtobufCMessageDescriptor util_set_dev_nwk_info_req__descriptor;
extern const ProtobufCMessageDescriptor app_cnf_start_commissioning_req__descriptor;
extern const ProtobufCMessageDescriptor zcl_action_req__descriptor;
extern const ProtobufCMessageDescriptor zcl_action_rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_zstack_2eproto__INCLUDED */
